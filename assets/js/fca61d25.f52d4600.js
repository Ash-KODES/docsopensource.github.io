"use strict";(self.webpackChunkgwoc_open_source=self.webpackChunkgwoc_open_source||[]).push([[131],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6498:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={sidebar_position:1},s="Dragonfly",p={unversionedId:"CNCF Projects/5.1_DragonFly",id:"CNCF Projects/5.1_DragonFly",isDocsHomePage:!1,title:"Dragonfly",description:"What is Dragonfly",source:"@site/docs/CNCF Projects/5.1_DragonFly.md",sourceDirName:"CNCF Projects",slug:"/CNCF Projects/5.1_DragonFly",permalink:"/docs/CNCF Projects/5.1_DragonFly",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Redox OS Summer of Code",permalink:"/docs/OpenSource Programs/4.25_Redox_OS_Summer_of_Code"},next:{title:"Kubernetes",permalink:"/docs/CNCF Projects/5.2_Kubernetes"}},c=[{value:"What is Dragonfly",id:"what-is-dragonfly",children:[],level:2},{value:"Main Features",id:"main-features",children:[{value:"Main Dragonfly Features:",id:"main-dragonfly-features",children:[],level:3}],level:2}],d={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dragonfly"},"Dragonfly"),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"https://repository-images.githubusercontent.com/309874357/c2b3ff80-a931-11eb-89b2-32c6ceed11cd"})),(0,a.kt)("h2",{id:"what-is-dragonfly"},"What is Dragonfly"),(0,a.kt)("p",null,"Dragonfly is an intelligent P2P-based image and file distribution tool. It aims to improve the efficiency and success rate of file transferring, and maximize the usage of network bandwidth, especially for the distribution of larget amounts of data, such as application distribution, cache distribution, log distribution, and image distribution.\nAt Alibaba, every month Dragonfly is invoked two billion times and distributes 3.4PB of data. Dragonfly has become one of the most important pieces of infrastructure at Alibaba.\nWhile container technologies makes DevOps life easier most of the time, it surely brings some challenges: for example the efficiency of image distribution, especially when you     have to replicate image distribution on several hosts.\nThe goal of Dragonfly is to tackle distribution problems in cloud native scenarios.\nThe project is comprised of three main components:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"supernode plays the role of central scheduler and controls all distribution procedure among the peer network "),(0,a.kt)("li",{parentName:"ul"},"dfget resides on each peer as an agent to download file pieces "),(0,a.kt)("li",{parentName:"ul"},"and \u201cdfdaemon\u201d plays the role of proxy which intercepts image downloading requests from container engine to dfget ")),(0,a.kt)("h2",{id:"main-features"},"Main Features"),(0,a.kt)("p",null,"This project is an open-source version of the Dragonfly used at Alibaba. You can find it ",(0,a.kt)("a",{parentName:"p",href:"%22https://github.com/dragonflyoss/Dragonfly%22"},"here")),(0,a.kt)("h3",{id:"main-dragonfly-features"},"Main Dragonfly Features:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"P2P-based file distribution"),": By using the P2P technology for file transmission, it makes the most out of the bandwidth resources of each peer to improve    downloading efficiency, and saves a lot of cross-IDC bandwidth, especially the costly cross-board bandwidth.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Non-invasive support to all kinds of container technologies"),": Dragonfly can seamlessly support various containers for distributing images.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Host level speed limit"),": In addition to rate limit for the current download task like many other downloading tools (for example wget and curl), Dragonfly also provides rate limit for the entire host.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Passive CDN"),": The CDN mechanism can avoid repetitive remote downloads.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Strong consistency"),": Dragonfly can make sure that all downloaded files are consistent even if users do not provide any check code (MD5).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Disk protection and highly efficient IO"),": Prechecking disk space, delaying synchronization, writing file blocks in the best order, isolating net-read/disk-write, and so on.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"High performance"),": SuperNode is completely closed-loop, which means that it doesn't rely on any database or distributed cache, processing requests with extremely high performance.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Auto-isolation of Exception"),": Dragonfly will automatically isolate exception nodes (peer or SuperNode) to improve download stability.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"No pressure on file source"),": Generally, only a few SuperNodes will download files from the source.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Support standard HTTP header"),": Support submitting authentication information through HTTP header.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Effective concurrency control of Registry Auth"),": Reduce the pressure on the Registry Auth Service.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Simple and easy to use"),": Very few configurations are needed."),(0,a.kt)("h1",{parentName:"li",id:"notable-milestones"},"Notable Milestones"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"7 project maintainers from 4 organizations")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"67 contributors")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"21 contributing organizations")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"4.6k + GitHub stars")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"100k + downloads in Docker Hub")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"120% increase in commits last year"),(0,a.kt)("h1",{parentName:"li",id:"how-does-it-work"},"How does it Work"),(0,a.kt)("p",null," Dragonfly works slightly differently when downloading general files and downloading container images."),"** Downloading General Files **",(0,a.kt)("p",null,' The SuperNode plays the role of CDN and schedules the transfer of blocks between each peer. dfget is the P2P client, which is also called a "peer". It\'s mainly used to download and share block '),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"https://d7y.io/docs/en-us/img/dfget.png"})),(0,a.kt)("p",{parentName:"li"}," ",(0,a.kt)("strong",{parentName:"p"}," Downloading Container Images ")),(0,a.kt)("p",null," Registry is similar to the file server above. dfget proxy is also called dfdaemon, which intercepts HTTP requests from docker pull or docker push, and then decides which requests to process with dfget. "),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"https://d7y.io/docs/en-us/img/dfget-combine-container.png"})),(0,a.kt)("p",{parentName:"li"}," ",(0,a.kt)("strong",{parentName:"p"}," Downloading Blocks ")),(0,a.kt)("p",null," Every file is divided into multiple blocks, which are transferred between peers. Each peer is a P2P client. The SuperNode will check if the corresponding file exists in the local disk. If not, the file will be downloaded into SuperNode from the file server. "),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"https://d7y.io/docs/en-us/img/distributing.png"})))))}u.isMDXComponent=!0}}]);