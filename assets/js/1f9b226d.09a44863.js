"use strict";(self.webpackChunkgwoc_open_source=self.webpackChunkgwoc_open_source||[]).push([[8285],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return h}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),h=o,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||a;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7174:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={sidebar_position:37},l="Notary",c={unversionedId:"CNCF Projects/5.37_Notary",id:"CNCF Projects/5.37_Notary",isDocsHomePage:!1,title:"Notary",description:"The Notary project, initially sponsored by Docker, is designed to provide high levels of trust  over digital content using strong cryptographic signatures. In addition to ensuring the provenance of the software, it also provides guarantees that the content is not modified without approval of the author anywhere in the supply chain.  This then allows higher level systems like Docker Enterprise Edition (EE)  with Docker Content Trust (which uses Notary) to establish clear policy on the usage of content.  For instance, a policy can be set that only signed content can be used at runtime and deployed by the orchestrators in the Docker platform. Overall Notary is a core piece of plumbing in Docker\u2019s  approach to the secure supply chain whereby security is seamlessly and uniformly embedded into a workflow from development all the way through to operations.",source:"@site/docs/CNCF Projects/5.37_Notary.md",sourceDirName:"CNCF Projects",slug:"/CNCF Projects/5.37_Notary",permalink:"/docs/CNCF Projects/5.37_Notary",tags:[],version:"current",sidebarPosition:37,frontMatter:{sidebar_position:37},sidebar:"tutorialSidebar",previous:{title:"KEDA",permalink:"/docs/CNCF Projects/5.36_KEDA"},next:{title:"Operator Framework",permalink:"/docs/CNCF Projects/5.38_OperatorFramework"}},p=[{value:"Overview",id:"overview",children:[],level:2},{value:"Goals",id:"goals",children:[],level:2},{value:"Getting started with the Notary CLI",id:"getting-started-with-the-notary-cli",children:[],level:2}],u={toc:p};function d(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"notary"},"Notary"),(0,a.kt)("img",{src:"https://i2.wp.com/www.docker.com/blog/wp-content/uploads/notary-blk@2x.png?resize=304%2C80&ssl=1"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Notary project"),", initially sponsored by Docker, is designed to provide high levels of trust  over digital content using strong cryptographic signatures. In addition to ensuring the provenance of the software, it also provides guarantees that the content is not modified without approval of the author anywhere in the supply chain.  This then allows higher level systems like Docker Enterprise Edition (EE)  with Docker Content Trust (which uses Notary) to establish clear policy on the usage of content.  For instance, a policy can be set that only signed content can be used at runtime and deployed by the orchestrators in the Docker platform. Overall Notary is a core piece of plumbing in Docker\u2019s  approach to the secure supply chain whereby security is seamlessly and uniformly embedded into a workflow from development all the way through to operations."),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The Notary project comprises a server and a client for running and interacting\nwith trusted collections."),(0,a.kt)("p",null,"Notary aims to make the internet more secure by making it easy for people to\npublish and verify content. We often rely on TLS to secure our communications\nwith a web server, which is inherently flawed, as any compromise of the server\nenables malicious content to be substituted for the legitimate content."),(0,a.kt)("p",null,"With Notary, publishers can sign their content offline using keys kept highly\nsecure. Once the publisher is ready to make the content available, they can\npush their signed trusted collection to a Notary Server."),(0,a.kt)("p",null,"Consumers, having acquired the publisher's public key through a secure channel,\ncan then communicate with any Notary server or (insecure) mirror, relying\nonly on the publisher's key to determine the validity and integrity of the\nreceived content."),(0,a.kt)("h2",{id:"goals"},"Goals"),(0,a.kt)("p",null,"Notary is based on The Update Framework, a secure general design for the problem of software distribution and updates. By using TUF, Notary achieves a number of key advantages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Survivable Key Compromise"),": Content publishers must manage keys in order to sign their content. Signing keys may be compromised or lost so systems must be designed in order to be flexible and recoverable in the case of key compromise. TUF's notion of key roles is utilized to separate responsibilities across a hierarchy of keys such that loss of any particular key (except the root role) by itself is not fatal to the security of the system."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Freshness Guarantees"),": Replay attacks are a common problem in designing secure systems, where previously valid payloads are replayed to trick another system. The same problem exists in the software update systems, where old signed can be presented as the most recent. Notary makes use of timestamping on publishing so that consumers can know that they are receiving the most up to date content. This is particularly important when dealing with software update where old vulnerable versions could be used to attack users."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Configurable Trust Thresholds"),": Oftentimes there are a large number of publishers that are allowed to publish a particular piece of content. For example, open source projects where there are a number of core maintainers. Trust thresholds can be used so that content consumers require a configurable number of signatures on a piece of content in order to trust it. Using thresholds increases security so that loss of individual signing keys doesn't allow publishing of malicious content."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Signing Delegation"),": To allow for flexible publishing of trusted collections, a content publisher can delegate part of their collection to another signer. This delegation is represented as signed metadata so that a consumer of the content can verify both the content and the delegation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Use of Existing Distribution"),": Notary's trust guarantees are not tied at all to particular distribution channels from which content is delivered. Therefore, trust can be added to any existing content delivery mechanism."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Untrusted Mirrors and Transport"),": All of the notary metadata can be mirrored and distributed via arbitrary channels.")),(0,a.kt)("p",null,"With technologies such as containerd and Kubernetes already members of CNCF, Notary and TUF are the first security-related projects to be added to the CNFC. This year has seen a significant uptick in data security compromises and we believe the CNCF is positioning itself ahead of the curve by inviting Notary and TUF to join. We hope that more security-focused projects are added to the CNCF over time."),(0,a.kt)("h2",{id:"getting-started-with-the-notary-cli"},"Getting started with the Notary CLI"),(0,a.kt)("p",null,"To use the Notary CLI with Docker hub images, have a look at Notary's\n",(0,a.kt)("a",{parentName:"p",href:"docs/getting_started.md"},"getting started docs"),"."),(0,a.kt)("p",null,"To use the CLI against a local Notary server rather than against Docker Hub:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Ensure that you have docker and docker-compose installed.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git clone https://github.com/theupdateframework/notary.git")," and from the cloned repository path,\nstart up a local Notary server and signer and copy the config file and testing certs to your\nlocal Notary config directory:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ docker-compose build\n$ docker-compose up -d\n$ mkdir -p ~/.notary && cp cmd/notary/config.json cmd/notary/root-ca.crt ~/.notary\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Add ",(0,a.kt)("inlineCode",{parentName:"p"},"127.0.0.1 notary-server")," to your ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/hosts"),", or if using docker-machine,\nadd ",(0,a.kt)("inlineCode",{parentName:"p"},"$(docker-machine ip) notary-server"),")."))),(0,a.kt)("p",null,"You can run through the examples in the\n",(0,a.kt)("a",{parentName:"p",href:"docs/getting_started.md"},"getting started docs")," and\n",(0,a.kt)("a",{parentName:"p",href:"docs/advanced_usage.md"},"advanced usage docs"),", but\nwithout the ",(0,a.kt)("inlineCode",{parentName:"p"},"-s")," (server URL) argument to the ",(0,a.kt)("inlineCode",{parentName:"p"},"notary")," command since the server\nURL is specified already in the configuration, file you copied."),(0,a.kt)("p",null,"You can also leave off the ",(0,a.kt)("inlineCode",{parentName:"p"},"-d ~/.docker/trust")," argument if you do not care\nto use ",(0,a.kt)("inlineCode",{parentName:"p"},"notary")," with Docker images."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"References -")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"docker.com/blog/notary-important-cncf/"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/notaryproject/notary"},"https://github.com/notaryproject/notary"))))}d.isMDXComponent=!0}}]);