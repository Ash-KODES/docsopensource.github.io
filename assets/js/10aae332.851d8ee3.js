"use strict";(self.webpackChunkgwoc_open_source=self.webpackChunkgwoc_open_source||[]).push([[8538],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||s;return n?o.createElement(m,i(i({ref:t},u),{},{components:n})):o.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var p=2;p<s;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2441:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var o=n(7462),r=n(3366),s=(n(7294),n(3905)),i=["components"],a={sidebar_position:42},l="POSTCSS",p={unversionedId:"Popular_Projects/6.41_PostCSS",id:"Popular_Projects/6.41_PostCSS",isDocsHomePage:!1,title:"POSTCSS",description:"PostCSS is a software development tool that uses JavaScript-based plugins to automate routine CSS operations.",source:"@site/docs/Popular_Projects/6.41_PostCSS.md",sourceDirName:"Popular_Projects",slug:"/Popular_Projects/6.41_PostCSS",permalink:"/docs/Popular_Projects/6.41_PostCSS",tags:[],version:"current",sidebarPosition:42,frontMatter:{sidebar_position:42},sidebar:"tutorialSidebar",previous:{title:"Solidity",permalink:"/docs/Popular_Projects/6.40_Solidity"},next:{title:"NestJS",permalink:"/docs/Popular_Projects/6.42_NestJS"}},u=[{value:"PostCSS is a software development tool that uses JavaScript-based plugins to automate routine CSS operations.",id:"postcss-is-a-software-development-tool-that-uses-javascript-based-plugins-to-automate-routine-css-operations",children:[],level:2},{value:"BENEFITS",id:"benefits",children:[],level:2},{value:"SETTING UP POSTCSS WITH GULP",id:"setting-up-postcss-with-gulp",children:[{value:"To install the PostCSS module in your project, run the following command in the terminal: npm i grunt-postcss -D.",id:"to-install-the-postcss-module-in-your-project-run-the-following-command-in-the-terminal-npm-i-grunt-postcss--d",children:[],level:4}],level:2},{value:"POSTCSS PLUGIN INSTALLATION EXAMPLE",id:"postcss-plugin-installation-example",children:[{value:"The modified code for Grunt, with our newly created processorArray arrays, is below:",id:"the-modified-code-for-grunt-with-our-newly-created-processorarray-arrays-is-below",children:[],level:3}],level:2},{value:"Plugins",id:"plugins",children:[],level:2},{value:"Here is the development CSS:",id:"here-is-the-development-css",children:[],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"postcss"},"POSTCSS"),(0,s.kt)("h2",{id:"postcss-is-a-software-development-tool-that-uses-javascript-based-plugins-to-automate-routine-css-operations"},"PostCSS is a software development tool that uses JavaScript-based plugins to automate routine CSS operations."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://artezio.com/wp-content/uploads/2016/08/postcss-logo.png",alt:"Image"})),(0,s.kt)("p",null,"The development of CSS, like all languages, is an iterative process. With every major release, we get new features and syntaxes that help us write our styles. "),(0,s.kt)("p",null,"CSS Level 3 introduced features that enable us to design interactions that previously were possible only with JavaScript. With every new day, tools emerge to make\nstyling easier and more flexible. One of the relatively recent tools introduced for styling is PostCSS. PostCSS aims to reinvent CSS with an ecosystem of custom\nplugins and tools."),(0,s.kt)("p",null,"Working with the same principles of preprocessors such as Sass and LESS, it transforms extended syntaxes and features into modern, browser-friendly CSS."),(0,s.kt)("p",null,"To provide helpful debugging, source maps are generated, and an abstract syntax tree (AST) exists to help us understand where and how code is being transformed."),(0,s.kt)("p",null,"Because PostCSS uses the Node.js framework, the abilities of the language and tools can be easily modified and customized as needed. Other tools such as Sass and\nLESS limit the abilities of the system to the methods available when the compiler was written."),(0,s.kt)("h2",{id:"benefits"},"BENEFITS"),(0,s.kt)("p",null,"PostCSS moves all of the code needed to create functions, utilities and mixins out of our production style sheets and wraps them as plugins. Now, for each project,\nwe can pick and choose the tools needed by including plugins in our task runner."),(0,s.kt)("p",null,"Maintaining a library of Sass or LESS snippets can be an overwhelming task and can leave a project bloated. Many projects have unused mixins and functions, included as\n\u201cjust in case\u201d code. PostCSS enables easily installable, plug-and-play modules, making the development process more flexible for the unique needs of a project."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://pragmaticstudio.com/images/tutorials/adding-tailwind-css-to-phoenix/pipeline.png",alt:"Image"})),(0,s.kt)("p",null,"Because PostCSS is written in JavaScript, we can use task runners like Gulp and Grunt to transform the CSS in our projects. The tutorial below demonstrates how to\nincorporate PostCSS in your workflow via either Gulp or Grunt. Using one tool over the other is not crucial and is simply a matter of personal preference or what\u2019s\nbest for the project."),(0,s.kt)("p",null,"Note: A complete version of both the Gulp and Grunt versions of the tool is available on GitHub. Feel free to use it as a starter template and to expand on it as needed."),(0,s.kt)("h2",{id:"setting-up-postcss-with-gulp"},"SETTING UP POSTCSS WITH GULP"),(0,s.kt)("p",null,"In your project\u2019s Gulpfile.js, we need to require our installed PostCSS module and then use it within a task. Be sure to update the paths to your development files and\nthe directory where the transformed output will go."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"      var postcss = require('gulp-postcss');\n\n       gulp.task('styles', function () {\n       return gulp.src('path/to/dev/style.css')\n      .pipe(postcss([]))\n      .pipe(gulp.dest(path/to/prod))\n      });\n      \n")),(0,s.kt)("h4",{id:"to-install-the-postcss-module-in-your-project-run-the-following-command-in-the-terminal-npm-i-grunt-postcss--d"},"To install the PostCSS module in your project, run the following command in the terminal: npm i grunt-postcss -D."),(0,s.kt)("p",null,"Once the plugin is installed on your system, enable it within the Gruntfile and create a task, as below.\nBe sure to update the cwd and dest values to reflect the structure of your app."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"        module.exports = function(grunt) {\n        grunt.initConfig({\n       pkg: grunt.file.readJSON('package.json'),\n       styles: {\n          options: {\n           processors: []\n        },\n         dist: {\n         files: [{\n         expand: true,\n         cwd: 'dev/',\n         src: ['**/*.css'],\n         dest: 'prod/'\n    }]\n  }\n}\n     });\n\n     // Load post-css.\n      grunt.loadNpmTasks('grunt-postcss');\n\n     };\n     \n")),(0,s.kt)("h2",{id:"postcss-plugin-installation-example"},"POSTCSS PLUGIN INSTALLATION EXAMPLE"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"          npm i postcss-focus -D\n          \n")),(0,s.kt)("h3",{id:"the-modified-code-for-grunt-with-our-newly-created-processorarray-arrays-is-below"},"The modified code for Grunt, with our newly created processorArray arrays, is below:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"      var processorArray = [\nrequire('postcss-plugin')()\n      ];\n\n    // Snipped for brevity\n     styles: {\n  options: {\n    processors: processorArray\n  },\n  dist: {\n    src: 'path/to/dev/style.css',\n    dest: 'path/to/prod/style.css'\n  }\n}\n")),(0,s.kt)("h2",{id:"plugins"},"Plugins"),(0,s.kt)("p",null,"Once we have installed a plugin and our build tool is prepared to compile our code, we can use PostCSS and the plugin features.\nThe first thing to do is create a file with a .css extension in the directory where we store our development code."),(0,s.kt)("p",null,"\u201cWait! A CSS file?\u201d Yup, a CSS file. Because PostCSS transforms our CSS, we don\u2019t need to use a specialized syntax \u2014 just traditional CSS.\nIf you are familiar with preprocessors, then it might feel unnatural to leave the .sass, .scss, .styl or .less files behind and return to .css.\nBut, in fact, it\u2019s not converting \u2014 it\u2019s transforming."),(0,s.kt)("p",null,"To process our styles with our newly installed PostCSS plugins, we can run our task runners with grunt styles and gulp styles, respectively.\nOur development CSS file will be processed through the PostCSS plugin and the plugins provided, and then it will be outputted to our specified production directory."),(0,s.kt)("p",null,"Below are a few plugins of note that might be of benefit as you get started with PostCSS. Included are instructions on installing and using the plugin."),(0,s.kt)("h2",{id:"here-is-the-development-css"},"Here is the development CSS:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"   section {\n   position: absolute 10px * *;\n    }\n\n      .topNav {\n       position: fixed 0 * * 0;\n     }\n\n       .modal {\n        position: fixed 40% 25%;\n       }\n\n     section {\n     position: absolute;\n     top: 10px;\n     }\n\n     .topNav {\n       position: fixed;\n       top: 0;\n       left: 0;\n        }\n\n      .modal {\n       position: fixed;\n       top: 40%;\n        right: 25%;\n        bottom: 40%;\n        left: 25%;\n        }\n")))}d.isMDXComponent=!0}}]);