"use strict";(self.webpackChunkgwoc_open_source=self.webpackChunkgwoc_open_source||[]).push([[8965],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,f=u["".concat(l,".").concat(h)]||u[h]||d[h]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7469:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:29},l="SPIRE",c={unversionedId:"CNCF Projects/5.29_SPIRE",id:"CNCF Projects/5.29_SPIRE",isDocsHomePage:!1,title:"SPIRE",description:"SPIRE is a production-ready solution based on SPIFFE APIs. It solves the problem of workload identity and fires the SPIFFE API to issue and validate the identity of different workloads.",source:"@site/docs/CNCF Projects/5.29_SPIRE.md",sourceDirName:"CNCF Projects",slug:"/CNCF Projects/5.29_SPIRE",permalink:"/docs/CNCF Projects/5.29_SPIRE",tags:[],version:"current",sidebarPosition:29,frontMatter:{sidebar_position:29},sidebar:"tutorialSidebar",previous:{title:"SPIFFE",permalink:"/docs/CNCF Projects/5.28_Spiffe"},next:{title:"Thanos",permalink:"/docs/CNCF Projects/5.30_Thanos"}},p=[{value:"SPIRE Architecture:",id:"spire-architecture",children:[],level:2},{value:"SPIRE Concepts",id:"spire-concepts",children:[],level:2},{value:"How the Node Attestation is done :",id:"how-the-node-attestation-is-done-",children:[],level:2},{value:"SPIRE is used By:",id:"spire-is-used-by",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"spire"},"SPIRE"),(0,i.kt)("p",null,"SPIRE is a production-ready solution based on SPIFFE APIs. It solves the problem of workload identity and fires the SPIFFE API to issue and validate the identity of different workloads."),(0,i.kt)("h2",{id:"spire-architecture"},"SPIRE Architecture:"),(0,i.kt)("p",null,"A SPIRE deployment is composed of a SPIRE Server and one or more SPIRE Agents. Here, WL refers to workload "),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/71713367/134288331-4832b316-6596-4330-beed-85cc1aae1115.png",alt:"image"})),(0,i.kt)("h2",{id:"spire-concepts"},"SPIRE Concepts"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h2",{parentName:"li",id:"workload-registration"},"Workload Registration"),(0,i.kt)("p",{parentName:"li"},"  We need to register the workload with the SPIRE server for it to identify that workload. A registration entry maps an identity \u2013 in the form of a SPIFFE ID \u2013 to a set of properties known as selectors that the workload must possess in order to be issued a particular identity.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h2",{parentName:"li",id:"attestation"},"Attestation"),(0,i.kt)("p",{parentName:"li"},"  Attestation, here, is asserting the identity of a workload. SPIRE performs attestation in two phases:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"first node attestation - in which the identity of the node the workload is running on is verified"),(0,i.kt)("li",{parentName:"ul"},"workload attestation - in which the workload on the node is verified")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h2",{parentName:"li",id:"node-attestation"},"Node Attestation"),(0,i.kt)("p",{parentName:"li"},"SPIRE requires that each agent authenticate and verify itself when it first connects to a server; this process is called node attestation. During node attestation, the agent and server together verify the identity of the node the agent is running on. The result of a successful node attestation is that the agent receives a unique SPIFFE ID. The agent\u2019s SPIFFE ID then serves as the \u201cparent\u201d of the workloads it\u2019s in charge of."))),(0,i.kt)("h2",{id:"how-the-node-attestation-is-done-"},"How the Node Attestation is done :"),(0,i.kt)("p",null,"For example purposes, we are using AWS here."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The agent AWS node attestor plugin queries AWS for proof of the node\u2019s identity and gives that information to the agent.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The agent passes this proof of identity to the server. The server passes this data to its AWS node attestor.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The server AWS node attestor validates proof of identity independently, or by calling out to an AWS API, using the information it obtained in step 2. The node attestor also creates a SPIFFE ID for the agent, and passes this back to the server process, along with any node selectors it discovered.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The server sends back an SVID (SPIFFE Verification Identity Document) for the agent node."))),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/71713367/134288436-870a5dc7-4287-4c9d-91ac-cb7455509bbb.png",alt:"image"})),(0,i.kt)("h2",{id:"spire-is-used-by"},"SPIRE is used By:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The Envoy proxy"),(0,i.kt)("li",{parentName:"ul"},"Pinterest Knox"),(0,i.kt)("li",{parentName:"ul"},"The Ghostunnel proxy")))}u.isMDXComponent=!0}}]);