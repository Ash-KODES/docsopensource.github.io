"use strict";(self.webpackChunkgwoc_open_source=self.webpackChunkgwoc_open_source||[]).push([[2408],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),m=o,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||a;return r?n.createElement(h,s(s({ref:t},c),{},{components:r})):n.createElement(h,s({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var p=2;p<a;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9057:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),s=["components"],l={sidebar_position:43},i="NestJS",p={unversionedId:"Popular_Projects/6.42_NestJS",id:"Popular_Projects/6.42_NestJS",isDocsHomePage:!1,title:"NestJS",description:"What is Nest.js?",source:"@site/docs/Popular_Projects/6.42_NestJS.md",sourceDirName:"Popular_Projects",slug:"/Popular_Projects/6.42_NestJS",permalink:"/docs/Popular_Projects/6.42_NestJS",tags:[],version:"current",sidebarPosition:43,frontMatter:{sidebar_position:43},sidebar:"tutorialSidebar",previous:{title:"POSTCSS",permalink:"/docs/Popular_Projects/6.41_PostCSS"},next:{title:"Redis",permalink:"/docs/Popular_Projects/6.43_Redis"}},c=[{value:"What is Nest.js?",id:"what-is-nestjs",children:[],level:2},{value:"Getting started",id:"getting-started",children:[],level:2},{value:"Installation",id:"installation",children:[],level:2},{value:"Project Structure",id:"project-structure",children:[],level:2},{value:"Platform",id:"platform",children:[],level:2},{value:"Details about the files",id:"details-about-the-files",children:[{value:"main.ts",id:"maints",children:[],level:3},{value:"app.modules.ts",id:"appmodulests",children:[],level:3},{value:"app.controllers.ts",id:"appcontrollersts",children:[],level:3},{value:"app.services.ts",id:"appservicests",children:[],level:3},{value:"Running the application",id:"running-the-application",children:[],level:3}],level:2},{value:"Contribute",id:"contribute",children:[],level:2},{value:"Nestjs Projects",id:"nestjs-projects",children:[],level:2}],d={toc:c};function u(e){var t=e.components,r=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"nestjs"},"NestJS"),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{alt:"NestjsLogo",width:"60%",src:"https://blog.codecentric.de/files/2019/04/nestjs-logo-1.png"})),(0,a.kt)("h2",{id:"what-is-nestjs"},"What is Nest.js?"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NestJS")," is quite a popular and cumulative ",(0,a.kt)("strong",{parentName:"p"},"JavaScript framework")," functioning under the hood of ",(0,a.kt)("strong",{parentName:"p"},"Node.js")," and is used to construct scalable, reliable, and efficient server-side applications. The framework is channeled with the Node.js environment and supports ",(0,a.kt)("strong",{parentName:"p"},"TypeScript")," fully. It also can be scaled to make use of ",(0,a.kt)("strong",{parentName:"p"},"Express.js")," under the influence of Node.js. Since NestJS is a full TypeScript supported framework, it can enable developers like you to code purely in JavaScript and would let you combine the concepts of ",(0,a.kt)("strong",{parentName:"p"},"Object-Oriented Programming(OOP)"),", ",(0,a.kt)("strong",{parentName:"p"},"Functional Reactive Programming(FRP)"),", and purely ",(0,a.kt)("strong",{parentName:"p"},"Functional Programming(FP)"),"."),(0,a.kt)("p",null,"NestJS aims to provide a certain level of abstraction mechanism to the developers so that not only the common server-side frameworks like ",(0,a.kt)("strong",{parentName:"p"},"Fastify")," or ",(0,a.kt)("strong",{parentName:"p"},"Express")," that are integrated internally, but can also be exposed to the APIs chosen by the developer. These hidden bars provide developers like you to gain the freedom to use the third-party modules vividly and they can be made to underlie in the NestJS platform without having to manipulate the entire server-side."),(0,a.kt)("h2",{id:"getting-started"},"Getting started"),(0,a.kt)("p",null,"To check out the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.nestjs.com"},"guide"),", visit ",(0,a.kt)("a",{parentName:"p",href:"https://docs.nestjs.com"},"docs.nestjs.com"),". "),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Download and install ",(0,a.kt)("a",{parentName:"li",href:"https://nodejs.org/"},"Node.js")),(0,a.kt)("li",{parentName:"ul"},"Nest CLI installation on local computer")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ npm i -g@nestjs/cli  \n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Creating a project")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ nest new project-name\n")),(0,a.kt)("h2",{id:"project-structure"},"Project Structure"),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{"align-items":"center",alt:"ProjectStructureNestjs",width:"150",height:"300",src:"https://raw.githubusercontent.com/A-GHOSH-dev/A-GHOSH-dev/master/project%20structure.png"})),(0,a.kt)("h2",{id:"platform"},"Platform"),(0,a.kt)("p",null,"Nest aims to be a platform-agnostic framework. Platform independence makes it possible to create reusable logical parts that developers can take advantage of across several different types of applications. Technically, Nest is able to work with any Node HTTP framework once an adapter is created. There are two HTTP platforms supported out-of-the-box: express and fastify. You can choose the one that best suits your needs.\nPlatform | Description\n-------|-----------\nplatform-express|Express is a well-known minimalist web framework for node. It's a battle tested, production-ready library with lots of resources implemented by the community. The @nestjs/platform-express package is used by default. Many users are well served with Express, and need take no action to enable it.\nplatform-fastify|Fastify is a high performance and low overhead framework highly focused on providing maximum efficiency and speed. "),(0,a.kt)("p",null,"When you pass a type to the NestFactory.create() method, as in the example below, the app object will have methods available exclusively for that specific platform."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const app = await NestFactory.create<NestExpressApplication>(AppModule);\n\n")),(0,a.kt)("h2",{id:"details-about-the-files"},"Details about the files"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"File name"),(0,a.kt)("th",{parentName:"tr",align:null},"Contents"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"main.ts"),(0,a.kt)("td",{parentName:"tr",align:null},"It is the application's entry point. It consists of a method NestFactory.create() which creates a new instance of the Nest application.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"app.modules.ts"),(0,a.kt)("td",{parentName:"tr",align:null},"It contains the module of the application's implementation.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"app.controller.ts"),(0,a.kt)("td",{parentName:"tr",align:null},"It consists of only one routed implementation controller of NestJS.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"app.services.ts"),(0,a.kt)("td",{parentName:"tr",align:null},"It is the usual service method implementation.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"app.controller.specs.ts"),(0,a.kt)("td",{parentName:"tr",align:null},"It testes the file for the controller.")))),(0,a.kt)("h3",{id:"maints"},"main.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"pModule } from './app.module';  \n  \nasync function bootstrap() {  \n  const app = await NestFactory.create(AppModule);  \n  await app.listen(3000);  \n}  \nbootstrap();  \n")),(0,a.kt)("p",null,"NestFactory method is imported as an entry point of the application. AppModule is imported from the previously discussed app. module file. Secondly, the bootstrap is marked as async and implemented. The main purpose of importing the bootstrap function is to call it for the code execution. The execution takes when the NestFactory.create() method is called the AppModule is passed as an argument to the root application module. This will attach a module by creating a new NestJS instance. The next step is to start the server by using the event listener method on the webserver with port 3000."),(0,a.kt)("h3",{id:"appmodulests"},"app.modules.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import { Module } from '@nestjs/common';  \nimport { AppController } from './app.controller';  \nimport { AppService } from './app.service';  \n  \n@Module({  \n  imports: [],  \n  controllers: [AppController],  \n  providers: [AppService],  \n})  \nexport class AppModule {}  \n")),(0,a.kt)("p",null,"AppModule is imported as a method and @Module decorator is imported from @nestjs/ sharing common library. The @Module decorator when passed consists of three properties namely imports, controllers, and providers. The specified controllers in the AppModule should always be the part of the array assigned to the property in the initial stage of the application development because the count of the controller is constrained to AppController which is the root module."),(0,a.kt)("h3",{id:"appcontrollersts"},"app.controllers.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import { Controller, Get } from '@nestjs/common';  \nimport { AppService } from './app.service';  \n  \n@Controller()  \nexport class AppController {  \n  constructor(private readonly appService: AppService) {}  \n  \n  @Get()  \n  getHello(): string {  \n    return this.appService.getHello();  \n  }  \n}  \n")),(0,a.kt)("p",null,"Controller in NestJS consisting of only one GET route. The class can be made controller just by adding the @Controller decorator. It is also imported from the @nestjs/ which is a common library for all. The point here is to understand clearly that the controller usually relies on a service class. In the examples given AppController uses Appservice to implement the app.services.ts file by importing the corresponding statement that is added at the top. However, the process of inserting AppService into AppController is based on the method of Dependency Injection which by default adds the parameter of the same type. A default route is then implemented to handle the HTTP GET request through @Get decorator to implement getHello method. The method is therefore powered by AppService to fetch data and carry out request and response actions by returning at the same time."),(0,a.kt)("h3",{id:"appservicests"},"app.services.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-import",metastring:"{ Injectable } from '@nestjs/common';","{":!0,Injectable:!0,"}":!0,from:!0,"'@nestjs/common';":!0},"@Injectable()  \nexport class AppService {  \n  getHello(): string {  \n    return 'Hello World!';  \n  }  \n}  \n")),(0,a.kt)("h3",{id:"running-the-application"},"Running the application"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ npm run start\n")),(0,a.kt)("h2",{id:"contribute"},"Contribute"),(0,a.kt)("p",null,"Nest.js is OpenSource. ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nestjs/nest"},"GitHub Repository for Nest.js")),(0,a.kt)("h2",{id:"nestjs-projects"},"Nestjs Projects"),(0,a.kt)("p",null,"There are several opensource projects built using nest.js which are available for contribution. Find the list ",(0,a.kt)("a",{parentName:"p",href:"https://awesomeopensource.com/projects/nestjs"},"here")))}u.isMDXComponent=!0}}]);