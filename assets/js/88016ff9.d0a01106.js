"use strict";(self.webpackChunkgwoc_open_source=self.webpackChunkgwoc_open_source||[]).push([[8460],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return u}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),l=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=l(e.components);return i.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=l(t),u=r,m=h["".concat(c,".").concat(u)]||h[u]||p[u]||a;return t?i.createElement(m,o(o({ref:n},d),{},{components:t})):i.createElement(m,o({ref:n},d))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=h;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},256:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return h}});var i=t(7462),r=t(3366),a=(t(7294),t(3905)),o=["components"],s={sidebar_position:18},c="Linkerd",l={unversionedId:"CNCF Projects/5.18_Linkerd",id:"CNCF Projects/5.18_Linkerd",isDocsHomePage:!1,title:"Linkerd",description:"Linkerd is an open-source network proxy installed as a service mesh for Kubernetes. It makes running services easier and safer by giving you runtime debugging, observability, reliability, and security all without requiring any changes to the code. Linkerd was designed to solve issues related to the operation and management of large applications and systems. Interaction between services is a critical component of an application's runtime behavior. Therefore, by providing a layer of abstraction to control this communication, Linkerd provides developers with more visibility and reliability. Without a dedicated layer of control, it can be difficult to measure and diagnose application problems and failures.",source:"@site/docs/CNCF Projects/5.18_Linkerd.md",sourceDirName:"CNCF Projects",slug:"/CNCF Projects/5.18_Linkerd",permalink:"/docs/CNCF Projects/5.18_Linkerd",tags:[],version:"current",sidebarPosition:18,frontMatter:{sidebar_position:18},sidebar:"tutorialSidebar",previous:{title:"TiKV",permalink:"/docs/CNCF Projects/5.17_TiKV"},next:{title:"ARGO",permalink:"/docs/CNCF Projects/5.19_argo"}},d=[{value:"What Exactly is a Service Mesh?",id:"what-exactly-is-a-service-mesh",children:[],level:2},{value:"Why Use Linkerd or Any Service Mesh?",id:"why-use-linkerd-or-any-service-mesh",children:[],level:2},{value:"How Linkerd Works",id:"how-linkerd-works",children:[{value:"Linkerd can communicate with application services using one of three configurations:",id:"linkerd-can-communicate-with-application-services-using-one-of-three-configurations",children:[],level:3}],level:2},{value:"Linkerd Architecture",id:"linkerd-architecture",children:[{value:"The Linkerd Data Plane",id:"the-linkerd-data-plane",children:[],level:3},{value:"The Linkerd Control Plane",id:"the-linkerd-control-plane",children:[],level:3}],level:2},{value:"Benefits of Linkerd",id:"benefits-of-linkerd",children:[],level:2},{value:"Conclusion",id:"conclusion",children:[],level:2}],p={toc:d};function h(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"linkerd"},"Linkerd"),(0,a.kt)("img",{src:"https://github.com/Khushi-Agrawal-1/Reference-images/blob/main/linkerd.png?raw=true"}),(0,a.kt)("p",null," Linkerd is an open-source network proxy installed as a service mesh for Kubernetes. It makes running services easier and safer by giving you runtime debugging, observability, reliability, and security all without requiring any changes to the code. Linkerd was designed to solve issues related to the operation and management of large applications and systems. Interaction between services is a critical component of an application's runtime behavior. Therefore, by providing a layer of abstraction to control this communication, Linkerd provides developers with more visibility and reliability. Without a dedicated layer of control, it can be difficult to measure and diagnose application problems and failures."),(0,a.kt)("h2",{id:"what-exactly-is-a-service-mesh"},"What Exactly is a Service Mesh?"),(0,a.kt)("p",null,"A service mesh is a dedicated infrastructure layer made to control service-to-service communication and allow separate parts of an application to communicate with each other.  It is not a \u201cmesh of services\u201d but rather a mesh of API proxies that services call locally. The proxies then relay each call to their intended target service, thus abstracting away all aspects related to the network. By intercepting network communication within the application, service meshes are able to extract metrics, apply service-to-service policies and encrypt the exchange.Service meshes are typically used in cloud-based applications, containers and microservices."),(0,a.kt)("img",{src:"https://github.com/Khushi-Agrawal-1/Reference-images/blob/main/linkerd-service-mesh-diagram-1024x587.png?raw=true"}),(0,a.kt)("h2",{id:"why-use-linkerd-or-any-service-mesh"},"Why Use Linkerd or Any Service Mesh?"),(0,a.kt)("p",null,"Service meshes are a state-of-the-art solution to make service-to-service communication resilient, observable and secure across an entire application. They promise that, by pushing all network communication into a dedicated infrastructure layer, the network with all its intrinsic failure modes can be encapsulated away, thus freeing the developer from the arduous and error-prone task of handling them in their application code. They are best positioned to deliver on this promise when used with stand-alone, moderately scaled microservice applications that run on Kubernetes."),(0,a.kt)("h2",{id:"how-linkerd-works"},"How Linkerd Works"),(0,a.kt)("p",null,"Linkerd runs as a standalone proxy, does not rely on specific languages or libraries and can be used in containers or microservices. The two common deployment models for Linkerd are per-host and as a sidecar."),(0,a.kt)("p",null,"With per-host deployment, a Linkerd instance can be attached to a physical or virtual host. This then routes all host traffic from each application service instance through the Linkerd instance."),(0,a.kt)("p",null,"Deploying Linkerd as a sidecar allows one Linkerd instance to be installed per instance of every application service. This is useful for container-based applications. For example, Linkerd can be used in a microservice application that uses Docker containers or Kubernetes pods."),(0,a.kt)("h3",{id:"linkerd-can-communicate-with-application-services-using-one-of-three-configurations"},"Linkerd can communicate with application services using one of three configurations:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"service-to-linker:")," Each service instance routes traffic through its corresponding Linkerd instance which then handles further traffic rules."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"linker-to-service:")," Linkerd sidecars take and route traffic to the corresponding service instance, rather than service instances receiving traffic directly."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"linker-to-linker:")," A combination of the service-to-linker and linker-to-service configurations that serves incoming traffic with the Linkerd instance which then routes traffic to the corresponding service instance. Then, the service instance routes outgoing traffic back through the Linkerd instance.")),(0,a.kt)("h2",{id:"linkerd-architecture"},"Linkerd Architecture"),(0,a.kt)("p",null,"Like all service meshes, Linkerd consists of a control plane and a data plane. The control plane is made up of a main controller component, a web component serving the user dashboard and a metrics component consisting of a modified Prometheus and Grafana. These components control the proxy configurations across the service mesh and process relevant metrics. The data plane consists of the interconnected Linkerd proxies themselves, which are typically deployed as \u201csidecars\u201d into each service container."),(0,a.kt)("img",{src:"https://github.com/Khushi-Agrawal-1/Reference-images/blob/main/linkerd-architecture.png?raw=true"}),(0,a.kt)("h3",{id:"the-linkerd-data-plane"},"The Linkerd Data Plane"),(0,a.kt)("p",null,"Since the proxy components that make up Linkerd\u2019s data plane are typically injected via command line, adding a service to Linkerd is pretty straightforward. We can merely deploy the service and inject the proxy component as a sidecar. Once the service is equipped with a proxy component, it immediately becomes part of the service mesh. "),(0,a.kt)("p",null,"Linkerd\u2019s proxy component supports the following features:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Transparently proxy HTTP, HTTP/2, TCP and WebSocket traffic,"),(0,a.kt)("li",{parentName:"ul"},"Gather telemetry for HTTP and TCP traffic,"),(0,a.kt)("li",{parentName:"ul"},"Provide latency-aware Layer 7 load balancing for HTTP traffic and Layer 4 load balancing for non-HTTP traffic,"),(0,a.kt)("li",{parentName:"ul"},"Automatically secure communication through TLS encryption (although currently labeled \u201cexperimental\u201d) and"),(0,a.kt)("li",{parentName:"ul"},"Diagnose failures via a nifty call \u201ctap\u201d facility.")),(0,a.kt)("h3",{id:"the-linkerd-control-plane"},"The Linkerd Control Plane"),(0,a.kt)("p",null,"Linkerd\u2019s control plane provides APIs and a user-facing web console, is responsible for proxy configuration, and collects and aggregates data plane metrics. Linkerd\u2019s control plane containers come with an instance of Linkerd\u2019s proxy pre-installed, they are automatically part of the service mesh and can be controlled just like any other service in the mesh. The same is not the case for other service meshes."),(0,a.kt)("p",null,"Its three main components are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The controller component, a collection of containers implementing the public controller API, the proxy API and other internal functionality."),(0,a.kt)("li",{parentName:"ul"},"The web component, implementing the end-user UI."),(0,a.kt)("li",{parentName:"ul"},"A metrics component consisting of a modified Prometheus that is typically coupled with a Grafana instance to provide visualization dashboards.")),(0,a.kt)("h2",{id:"benefits-of-linkerd"},"Benefits of Linkerd"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Simplifies communication between services in both microservices and containers."),(0,a.kt)("li",{parentName:"ul"},"Makes the process of documenting how parts of an application interact more manageable."),(0,a.kt)("li",{parentName:"ul"},"Provides common service mesh features such as latency-aware load balancing, service discovery, tracing and instrumentation."),(0,a.kt)("li",{parentName:"ul"},"Allows providers to choose which coding language is most appropriate for their service."),(0,a.kt)("li",{parentName:"ul"},"Offers higher visibility and control through decoupling communication from the main application code."),(0,a.kt)("li",{parentName:"ul"},"Gives application managers the ability to address communication and mechanics problems without changing the application itself."),(0,a.kt)("li",{parentName:"ul"},"Makes application code more efficient and easier to scale.")),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"Service meshes like Linkerd are powerful technologies to \u201cmake service-to-service connections safe, fast and reliable.\u201d They are also opinionated, complex and can have a significant effect on overall performance. Adopting one will therefore most likely succeed in uniform environments such as self-contained microservice architectures that run on Kubernetes."),(0,a.kt)("p",null,"Compared to other service meshes, Linkerd has the advantage that it can be deployed per host, as well as per container, which makes it a more flexible choice in mixed environments that run virtual machines as well as containers or where otherwise sidecar injection is not an option."))}h.isMDXComponent=!0}}]);