"use strict";(self.webpackChunkgwoc_open_source=self.webpackChunkgwoc_open_source||[]).push([[5089],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6268:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),l=["components"],o={sidebar_position:23},s="CRI-O",p={unversionedId:"CNCF Projects/5.23_CRI-O",id:"CNCF Projects/5.23_CRI-O",isDocsHomePage:!1,title:"CRI-O",description:"CRI-O logo",source:"@site/docs/CNCF Projects/5.23_CRI-O.md",sourceDirName:"CNCF Projects",slug:"/CNCF Projects/5.23_CRI-O",permalink:"/docs/CNCF Projects/5.23_CRI-O",tags:[],version:"current",sidebarPosition:23,frontMatter:{sidebar_position:23},sidebar:"tutorialSidebar",previous:{title:"CNI",permalink:"/docs/CNCF Projects/5.22_CNI"},next:{title:"FALCO",permalink:"/docs/CNCF Projects/5.24_Falco"}},u=[{value:"What is Kubernetes?",id:"what-is-kubernetes",children:[],level:2},{value:"What is the CRI and why does Kubernetes need it?",id:"what-is-the-cri-and-why-does-kubernetes-need-it",children:[],level:2},{value:"What is OCI?",id:"what-is-oci",children:[{value:"OCI compatible runtimes",id:"oci-compatible-runtimes",children:[],level:3},{value:"Storage",id:"storage",children:[],level:3},{value:"Container images",id:"container-images",children:[],level:3},{value:"Networking",id:"networking",children:[],level:3},{value:"Monitoring",id:"monitoring",children:[],level:3}],level:2},{value:"Install packaged versions of CRI-O",id:"install-packaged-versions-of-cri-o",children:[{value:"Supported versions",id:"supported-versions",children:[],level:3},{value:"Installation Instructions",id:"installation-instructions",children:[{value:"openSUSE:",id:"opensuse",children:[],level:4},{value:"Fedora 31 or later",id:"fedora-31-or-later",children:[],level:4},{value:"Other yum based operating systems",id:"other-yum-based-operating-systems",children:[],level:4},{value:"APT based operating systems",id:"apt-based-operating-systems",children:[],level:4}],level:3}],level:2},{value:"Build and install CRI-O from source",id:"build-and-install-cri-o-from-source",children:[{value:"Runtime dependencies",id:"runtime-dependencies",children:[],level:3},{value:"Build and Run Dependencies",id:"build-and-run-dependencies",children:[{value:"Fedora - RHEL 7 - CentOS",id:"fedora---rhel-7---centos",children:[],level:4},{value:"RHEL 8",id:"rhel-8",children:[],level:4},{value:"Debian - Raspbian - Ubuntu",id:"debian---raspbian---ubuntu",children:[],level:4}],level:3},{value:"Get Source Code",id:"get-source-code",children:[],level:3},{value:"Build",id:"build",children:[{value:"Install with Ansible",id:"install-with-ansible",children:[],level:4},{value:"Build Tags",id:"build-tags",children:[],level:4}],level:3},{value:"Static builds",id:"static-builds",children:[{value:"Creating a release archive",id:"creating-a-release-archive",children:[],level:4}],level:3},{value:"Download conmon",id:"download-conmon",children:[],level:3},{value:"Setup CNI networking",id:"setup-cni-networking",children:[],level:3},{value:"CRI-O configuration",id:"cri-o-configuration",children:[],level:3},{value:"Validate registries in registries.conf",id:"validate-registries-in-registriesconf",children:[{value:"Optional - Modify verbosity of logs",id:"optional---modify-verbosity-of-logs",children:[],level:4},{value:"Optional - Modify capabilities and sysctls",id:"optional---modify-capabilities-and-sysctls",children:[],level:4}],level:3},{value:"Starting CRI-O",id:"starting-cri-o",children:[],level:3},{value:"Using CRI-O",id:"using-cri-o",children:[],level:3}],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cri-o"},"CRI-O"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://github.com/cri-o/cri-o/blob/main/logo/crio-logo.svg?raw=true",alt:"CRI-O logo"})),(0,r.kt)("p",null,"CRI-O is an implementation of the Kubernetes CRI (Container Runtime Interface) to enable using OCI (Open Container Initiative) compatible runtimes. It is a lightweight alternative to using Docker as the runtime for kubernetes. It allows Kubernetes to use any OCI-compliant runtime as the container runtime for running pods. Today it supports runc and Kata Containers as the container runtimes but any OCI-conformant runtime can be plugged in principle."),(0,r.kt)("p",null,"CRI-O supports OCI container images and can pull from any container registry. It is a lightweight alternative to using Docker, Moby or rkt as the runtime for Kubernetes."),(0,r.kt)("h2",{id:"what-is-kubernetes"},"What is Kubernetes?"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/65653459/134172386-a0b810c3-1b26-418c-ae64-08e5ad7cedce.png",alt:"index"})),(0,r.kt)("p",null,"Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available."),(0,r.kt)("p",null,"Google open-sourced the Kubernetes project in 2014. Kubernetes combines over 15 years of Google's experience running production workloads at scale with best-of-breed ideas and practices from the community."),(0,r.kt)("h2",{id:"what-is-the-cri-and-why-does-kubernetes-need-it"},"What is the CRI and why does Kubernetes need it?"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/65653459/134172150-77e54931-00bd-4bab-982c-4fa274bb513d.png",alt:"CRI"})),(0,r.kt)("p",null,"Each container runtime has it own strengths, and many users have asked for Kubernetes to support more runtimes. In the Kubernetes 1.5 release, kubernetes introduced the Container Runtime Interface (CRI) -- a plugin interface which enables kubelet to use a wide variety of container runtimes, without the need to recompile. CRI consists of a protocol buffers and gRPC API, and libraries, with additional specifications and tools under active development. "),(0,r.kt)("h2",{id:"what-is-oci"},"What is OCI?"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/65653459/134172022-e1b3a236-6e4d-436c-9b75-5bd027bcfb6e.jpg",alt:"Open_Container_Initiative_Logo"})),(0,r.kt)("p",null,"The Open Container Initiative (OCI) is a lightweight, open governance structure (project), formed under the auspices of the Linux Foundation, for the express purpose of creating open industry standards around container formats and runtime. The OCI was launched on June 22nd 2015 by Docker, CoreOS and other leaders in the container industry."),(0,r.kt)("p",null,"The OCI currently contains two specifications: the Runtime Specification (runtime-spec) and the Image Specification (image-spec). The Runtime Specification outlines how to run a \u201cfilesystem bundle\u201d that is unpacked on disk. At a high-level an OCI implementation would download an OCI Image then unpack that image into an OCI Runtime filesystem bundle. At this point the OCI Runtime Bundle would be run by an OCI Runtime."),(0,r.kt)("h1",{id:"changes-in-kubernetes-workflow-recently"},"Changes in Kubernetes Workflow Recently"),(0,r.kt)("p",null,"Kubernetes has deprecated the support for Dockershim to optimise the workflow. Now, Kubelet can directly interact with containerd or any other container runtime interface such as CRI-O."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/65653459/134171608-7862da22-3a6d-424d-b1de-9f575075f6d2.jpg",alt:"BLOG INSIDE-1"})),(0,r.kt)("h1",{id:"containerd"},"containerd"),(0,r.kt)("p",null,"containerd is a high-level container runtime that came from Docker, and implements the CRI spec. It pulls images from registries, manages them and then hands over to a lower-level runtime, which actually creates and runs the container processes."),(0,r.kt)("p",null,"containerd was separated out of the Docker project, to make Docker more modular."),(0,r.kt)("p",null,"So Docker uses containerd internally itself. When you install Docker, it will also install containerd."),(0,r.kt)("p",null,"containerd implements the Kubernetes Container Runtime Interface (CRI), via its cri plugin."),(0,r.kt)("h1",{id:"cri-o-1"},"CRI-O"),(0,r.kt)("p",null,"CRI-O is a high-level container runtime which implements the Container Runtime Interface (CRI). It\u2019s an alternative to containerd. It pulls container images from registries, manages them on disk, and launches a lower-level runtime to run container processes."),(0,r.kt)("p",null,"It was specifically created from the ground up as a container runtime for Kubernetes as Kubernetes has deprecated it's support for dockershim. It provides the ability to start, stop and restart containers, just like containerd."),(0,r.kt)("h1",{id:"contributors"},"Contributors"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/65653459/134026544-8a5768ff-1cfa-4f17-823b-41b26531adbc.PNG",alt:"Contributors"})),(0,r.kt)("p",null,"CRI-O is developed by maintainers and contributors from these companies and others. It is a community-driven, open source project. Feedback, users, and of course, contributors, are always welcome via the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cri-o/cri-o"},"cri-o/cri-o")," GitHub project."),(0,r.kt)("h1",{id:"architecture"},"Architecture"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/65653459/133961894-4a64f03b-77d5-45fe-a2e3-a3535ea8c915.png",alt:"architecture"})),(0,r.kt)("p",null,"The architectural components are as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Kubernetes contacts the kubelet to launch a pod.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"- Pods are a kubernetes concept consisting of one or more containers sharing the same IPC, NET and PID `namespaces` and living in the same cgroup.\n"))),(0,r.kt)("li",{parentName:"ul"},"The kubelet forwards the request to the CRI-O daemon VIA kubernetes CRI (Container runtime interface) to launch the new POD."),(0,r.kt)("li",{parentName:"ul"},"CRI-O uses the ",(0,r.kt)("inlineCode",{parentName:"li"},"containers/image")," library to pull the image from a container registry."),(0,r.kt)("li",{parentName:"ul"},"The downloaded image is unpacked into the container\u2019s root filesystems, stored in COW file systems, using containers/storage library."),(0,r.kt)("li",{parentName:"ul"},"After the rootfs has been created for the container, CRI-O generates an OCI runtime specification json file describing how to run the container using the OCI Generate tools."),(0,r.kt)("li",{parentName:"ul"},"CRI-O then launches an OCI Compatible Runtime using the specification to run the container proceses. The default OCI Runtime is runc."),(0,r.kt)("li",{parentName:"ul"},"Each container is monitored by a separate ",(0,r.kt)("inlineCode",{parentName:"li"},"conmon")," process. The conmon process holds the pty of the PID1 of the container process. It handles logging for the container and records the exit code for the container process."),(0,r.kt)("li",{parentName:"ul"},"Networking for the pod is setup through use of ",(0,r.kt)("img",{parentName:"li",src:"https://github.com/containernetworking/cni",alt:"CNI"}),", so any CNI plugin can be used with CRI-O.")),(0,r.kt)("h1",{id:"components"},"Components"),(0,r.kt)("p",null,"CRI-O is made up of several components that are found in different GitHub repositories."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#OCIcompatibleruntimes"},"OCI compatible runtime")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#Storage"},"containers/storage")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#Containerimages"},"containers/image")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#Networking"},"networking (CNI)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#Monitoring"},"container monitoring (conmon)")),(0,r.kt)("li",{parentName:"ul"},"Security is provided by several core Linux capabilities")),(0,r.kt)("h3",{id:"oci-compatible-runtimes"},"OCI compatible runtimes"),(0,r.kt)("p",null,"CRI-O supports any ",(0,r.kt)("img",{parentName:"p",src:"https://github.com/opencontainers/runtime-tools",alt:"OCI compatible runtime"}),". They test with runc and Clear Containers today."),(0,r.kt)("h3",{id:"storage"},"Storage"),(0,r.kt)("p",null,"The ",(0,r.kt)("img",{parentName:"p",src:"https://github.com/containers/storage",alt:"containers/storage"})," library is used for managing layers and creating root file-systems for the containers in a pod: ",(0,r.kt)("inlineCode",{parentName:"p"},"Overlayfs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"devicemapper"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"AUFS")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"btrfs")," are implemented, with ",(0,r.kt)("inlineCode",{parentName:"p"},"Overlayfs")," as the default driver."),(0,r.kt)("h3",{id:"container-images"},"Container images"),(0,r.kt)("p",null,"The ",(0,r.kt)("img",{parentName:"p",src:"https://github.com/containers/image",alt:"containers/image"})," library is used for pulling images from registries. Currently, it supports Docker ",(0,r.kt)("img",{parentName:"p",src:"https://docs.docker.com/registry/spec/manifest-v2-1/",alt:"schema 2/version 1"})," as well as ",(0,r.kt)("img",{parentName:"p",src:"https://docs.docker.com/registry/spec/manifest-v2-2/",alt:"schema 2/version 2"}),". It also passes all Docker and Kubernetes tests."),(0,r.kt)("h3",{id:"networking"},"Networking"),(0,r.kt)("p",null,"The Container Network Interface ",(0,r.kt)("img",{parentName:"p",src:"https://github.com/containernetworking/cni",alt:"CNI"})," is used for setting up networking for the pods. Various CNI plugins such as Flannel, Weave and OpenShift-SDN have been tested with CRI-O and are working as expected."),(0,r.kt)("h3",{id:"monitoring"},"Monitoring"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://github.com/cri-o/cri-o/tree/master/conmon",alt:"conmon"})," is a utility within CRI-O that is used to monitor the containers, handle logging from the container process, serve attach clients and detects Out Of Memory (OOM) situations."),(0,r.kt)("h1",{id:"security"},"Security"),(0,r.kt)("p",null,"Container security separation policies are provided by a series of tools including SELinux, Capabilities, seccomp, and other security separation policies as specified in the OCI Specification."),(0,r.kt)("h1",{id:"cri-o-installation-instructions"},"CRI-O Installation Instructions"),(0,r.kt)("p",null,"This guide will walk you through the installation of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cri-o/cri-o"},"CRI-O"),", an Open Container Initiative-based implementation of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/container-runtime-interface-v1.md"},"Kubernetes Container Runtime Interface"),".\nIt is assumed you are running a Linux machine."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Table of Contents"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#install-packaged-versions-of-cri-o"},"Install packaged versions of CRI-O"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#supported-versions"},"Supported versions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#installation-instructions"},"Installation Instructions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#openSUSE"},"openSUSE")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#fedora-31-or-later"},"Fedora 31 or later")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#other-yum-based-operating-systems"},"Other yum based operating systems")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#apt-based-operating-systems"},"APT based operating systems")))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#build-and-install-cri-o-from-source"},"Build and install CRI-O from source"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#runtime-dependencies"},"Runtime dependencies")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#build-and-run-dependencies"},"Build and Run Dependencies"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#fedora---rhel-7---centos"},"Fedora - RHEL 7 - CentOS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rhel-8"},"RHEL 8")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#debian---raspbian---ubuntu"},"Debian - Raspbian - Ubuntu")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#get-source-code"},"Get Source Code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#build"},"Build"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#install-with-ansible"},"Install with Ansible")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#build-tags"},"Build Tags")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#static-builds"},"Static builds"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#creating-a-release-archive"},"Creating a release archive")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#download-conmon"},"Download conmon")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setup-cni-networking"},"Setup CNI networking")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#cri-o-configuration"},"CRI-O configuration"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#validate-registries-in-registriesconf"},"Validate registries in registries.conf")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#recommended---use-systemd-cgroups"},"Recommended - Use systemd cgroups.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#optional---modify-verbosity-of-logs"},"Optional - Modify verbosity of logs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#optional---modify-capabilities-and-sysctls"},"Optional - Modify capabilities and sysctls")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#starting-cri-o"},"Starting CRI-O")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#using-cri-o"},"Using CRI-O"))))),(0,r.kt)("h2",{id:"install-packaged-versions-of-cri-o"},"Install packaged versions of CRI-O"),(0,r.kt)("p",null,"CRI-O builds for native package managers using ",(0,r.kt)("a",{parentName:"p",href:"build.opensuse.org"},"openSUSE's OBS")),(0,r.kt)("h3",{id:"supported-versions"},"Supported versions"),(0,r.kt)("p",null,"CRI-O follows the ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/setup/release/version-skew-policy/#supported-versions"},"Kubernetes support cycle")," of three minor releases.\nCRI-O also attempts to package for the following operating systems:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Fedora 31+\nopenSUSE\nCentOS 8\nCentOS 8 Stream\nCentOS 7\nDebian Unstable\nDebian Testing\nDebian 10\nRasbian 10\nxUbuntu 20.10\nxUbuntu 20.04\nxUbuntu 18.04\n")),(0,r.kt)("p",null,"To install, choose a supported version for your operating system, and export it as a variable, like so:\n",(0,r.kt)("inlineCode",{parentName:"p"},"export VERSION=1.19")),(0,r.kt)("p",null,"We also save releases as subprojects. If you'd, for instance, like to use ",(0,r.kt)("inlineCode",{parentName:"p"},"1.18.3")," you can set\n",(0,r.kt)("inlineCode",{parentName:"p"},"export VERSION=1.19:1.19.1")),(0,r.kt)("p",null,"Packaging for CRI-O is done best-effort, and is largely driven by requests.\nIf there's a version or operating system that is missing, please ",(0,r.kt)("a",{parentName:"p",href:"github.com/cri-o/cri-o/issues/new"},"open an issue"),"."),(0,r.kt)("h3",{id:"installation-instructions"},"Installation Instructions"),(0,r.kt)("h4",{id:"opensuse"},"openSUSE:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"sudo zypper install cri-o\n")),(0,r.kt)("h4",{id:"fedora-31-or-later"},"Fedora 31 or later"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"sudo dnf module enable cri-o:$VERSION\nsudo dnf install cri-o\n")),(0,r.kt)("p",null,"For Fedora, we only support setting minor versions. i.e: ",(0,r.kt)("inlineCode",{parentName:"p"},"VERSION=1.18"),", and do not support pinning patch versions: ",(0,r.kt)("inlineCode",{parentName:"p"},"VERSION=1.18.3")),(0,r.kt)("h4",{id:"other-yum-based-operating-systems"},"Other yum based operating systems"),(0,r.kt)("p",null,"To install on the following operating systems, set the environment variable $OS as the appropriate field in the following table:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Operating system"),(0,r.kt)("th",{parentName:"tr",align:null},"$OS"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Centos 8"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CentOS_8"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Centos 8 Stream"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CentOS_8_Stream"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Centos 7"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CentOS_7"))))),(0,r.kt)("p",null,"And then run the following as root:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/devel:kubic:libcontainers:stable.repo\ncurl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo\nyum install cri-o\n")),(0,r.kt)("h4",{id:"apt-based-operating-systems"},"APT based operating systems"),(0,r.kt)("p",null,"Note: this tutorial assumes you have curl and gnupg installed"),(0,r.kt)("p",null,"To install on the following operating systems, set the environment variable $OS as the appropriate field in the following table:\n| Operating system | $OS               |\n| ---------------- | ----------------- |\n| Debian Unstable  | ",(0,r.kt)("inlineCode",{parentName:"p"},"Debian_Unstable")," |\n| Debian Testing   | ",(0,r.kt)("inlineCode",{parentName:"p"},"Debian_Testing"),"  |\n| Raspberry Pi OS  | ",(0,r.kt)("inlineCode",{parentName:"p"},"Raspbian_10"),"     |\n| Ubuntu 20.04     | ",(0,r.kt)("inlineCode",{parentName:"p"},"xUbuntu_20.04"),"   |\n| Ubuntu 19.10     | ",(0,r.kt)("inlineCode",{parentName:"p"},"xUbuntu_19.10"),"   |\n| Ubuntu 19.04     | ",(0,r.kt)("inlineCode",{parentName:"p"},"xUbuntu_19.04"),"   |\n| Ubuntu 18.04     | ",(0,r.kt)("inlineCode",{parentName:"p"},"xUbuntu_18.04"),"   |"),(0,r.kt)("p",null,"If installing cri-o-runc (recommended), you'll need to install libseccomp >= 2.4.1. This is not available in distros based on Debian buster or below, so buster backports will need to be enabled:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"echo 'deb http://deb.debian.org/debian buster-backports main' > /etc/apt/sources.list.d/backports.list\napt update\napt install -y libseccomp2 || apt update -y libseccomp2\n")),(0,r.kt)("p",null,"And then run the following as root:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list\necho "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.list\n\ncurl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/Release.key | apt-key add -\ncurl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | apt-key add -\n\napt-get update\napt-get install cri-o cri-o-runc\n')),(0,r.kt)("p",null,"Note: We include cri-o-runc because Ubuntu and Debian include their own packaged version of runc.\nWhile this version should work with CRI-O, keeping the packaged versions of CRI-O and runc in sync ensures they work together.\nIf you'd like to use the distribution's runc, you'll have to add the file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[crio.runtime.runtimes.runc]\nruntime_path = ""\nruntime_type = "oci"\nruntime_root = "/run/runc"\n')),(0,r.kt)("p",null,"to ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/crio/crio.conf.d/")),(0,r.kt)("h2",{id:"build-and-install-cri-o-from-source"},"Build and install CRI-O from source"),(0,r.kt)("h3",{id:"runtime-dependencies"},"Runtime dependencies"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"runc, Clear Containers runtime, or any other OCI compatible runtime"),(0,r.kt)("li",{parentName:"ul"},"iproute"),(0,r.kt)("li",{parentName:"ul"},"iptables")),(0,r.kt)("p",null,"Latest version of ",(0,r.kt)("inlineCode",{parentName:"p"},"runc")," is expected to be installed on the system. It is picked up as the default runtime by CRI-O."),(0,r.kt)("h3",{id:"build-and-run-dependencies"},"Build and Run Dependencies"),(0,r.kt)("h4",{id:"fedora---rhel-7---centos"},"Fedora - RHEL 7 - CentOS"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Required")),(0,r.kt)("p",null,"Fedora, RHEL 7, CentOS and related distributions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yum install -y \\\n  containers-common \\\n  device-mapper-devel \\\n  git \\\n  glib2-devel \\\n  glibc-devel \\\n  glibc-static \\\n  go \\\n  gpgme-devel \\\n  libassuan-devel \\\n  libgpg-error-devel \\\n  libseccomp-devel \\\n  libselinux-devel \\\n  pkgconfig \\\n  make \\\n  runc\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Please note"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CentOS 8")," (or higher): ",(0,r.kt)("inlineCode",{parentName:"li"},"pkgconfig")," package is replaced by ",(0,r.kt)("inlineCode",{parentName:"li"},"pkgconf-pkg-config")),(0,r.kt)("li",{parentName:"ul"},"By default btrfs is not enabled. To add the btrfs support, install the\nfollowing package: ",(0,r.kt)("inlineCode",{parentName:"li"},"btrfs-progs-devel")),(0,r.kt)("li",{parentName:"ul"},"It is possible the distribution packaged version of runc is out of date. If you'd like to get the latest and greatest runc, consider using the one found in ",(0,r.kt)("a",{parentName:"li",href:"https://build.opensuse.org/project/show/devel:kubic:libcontainers:stable"},"https://build.opensuse.org/project/show/devel:kubic:libcontainers:stable"))),(0,r.kt)("h4",{id:"rhel-8"},"RHEL 8"),(0,r.kt)("p",null,"RHEL 8 distributions:\\\nMake sure you are subscribed to the following repositories: \\\nBaseOS/x86_64 \\\nAppstream/x86_64\nCodeReady Linux Builder for x86_64"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"subscription-manager repos --enable=rhel-8-for-x86_64-baseos-rpms\nsubscription-manager repos --enable=rhel-8-for-x86_64-appstream-rpms\nsubscription-manager repos --enable=codeready-builder-for-rhel-8-x86_64-rpms\n")),(0,r.kt)("p",null,"Follow the guide below to subscribe to the repositories if not already subscribed:\\\n",(0,r.kt)("a",{parentName:"p",href:"https://access.redhat.com/solutions/265523"},"https://access.redhat.com/solutions/265523")),(0,r.kt)("p",null,"This requires go version 1.12 or greater:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"yum module -y install go-toolset\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yum install -y \\\n  containers-common \\\n  device-mapper-devel \\\n  git \\\n  make \\\n  glib2-devel \\\n  glibc-devel \\\n  glibc-static \\\n  runc \\\n")),(0,r.kt)("p",null,"Here is a link on how to install a source rpm on RHEL: \\\n",(0,r.kt)("a",{parentName:"p",href:"https://www.itechlounge.net/2012/12/linux-how-to-install-source-rpm-on-rhelcentos/"},"https://www.itechlounge.net/2012/12/linux-how-to-install-source-rpm-on-rhelcentos/")),(0,r.kt)("p",null,"Dependency: gpgme-devel \\\nLink: ",(0,r.kt)("a",{parentName:"p",href:"http://download.eng.bos.redhat.com/brewroot/packages/gpgme/1.10.0/6.el8/x86_64/"},"http://download.eng.bos.redhat.com/brewroot/packages/gpgme/1.10.0/6.el8/x86_64/")),(0,r.kt)("p",null,"Dependency: go-md2man \\\nCommand:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"go get github.com/cpuguy83/go-md2man\n")),(0,r.kt)("p",null,"The following dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  libassuan \\\n  libassuan-devel \\\n  libgpg-error \\\n  libseccomp \\\n  libselinux \\\n  pkgconf-pkg-config \\\n")),(0,r.kt)("h4",{id:"debian---raspbian---ubuntu"},"Debian - Raspbian - Ubuntu"),(0,r.kt)("p",null,"On Debian, Raspbian and Ubuntu distributions, ",(0,r.kt)("a",{parentName:"p",href:"../README.md#installing-crio"},"enable the Kubic project\nrepositories")," and install the following packages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"apt-get update -qq && apt-get install -y \\\n  btrfs-tools \\\n  containers-common \\\n  git \\\n  golang-go \\\n  libassuan-dev \\\n  libdevmapper-dev \\\n  libglib2.0-dev \\\n  libc6-dev \\\n  libgpgme11-dev \\\n  libgpg-error-dev \\\n  libseccomp-dev \\\n  libsystemd-dev \\\n  libselinux1-dev \\\n  pkg-config \\\n  go-md2man \\\n  cri-o-runc \\\n  libudev-dev \\\n  software-properties-common \\\n  gcc \\\n  make\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Caveats and Notes:")),(0,r.kt)("p",null,"If using an older release or a long-term support release, be careful to double-check that the version of ",(0,r.kt)("inlineCode",{parentName:"p"},"runc")," is new enough (running ",(0,r.kt)("inlineCode",{parentName:"p"},"runc --version")," should produce ",(0,r.kt)("inlineCode",{parentName:"p"},"spec: 1.0.0"),"), or else build your own."),(0,r.kt)("p",null,"Be careful to double-check that the version of golang is new enough, version\n1.12.x or higher is required. If needed, newer golang versions are available at\n",(0,r.kt)("a",{parentName:"p",href:"https://golang.org/dl"},"the official download website"),"."),(0,r.kt)("h3",{id:"get-source-code"},"Get Source Code"),(0,r.kt)("p",null,"Clone the source code using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/cri-o/cri-o # or your fork\ncd cri-o\n")),(0,r.kt)("p",null,"Make sure your ",(0,r.kt)("inlineCode",{parentName:"p"},"CRI-O")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"kubernetes")," versions are of matching major versions.\nFor instance, if you want to be compatible with the latest kubernetes release,\nyou'll need to use the latest tagged release of ",(0,r.kt)("inlineCode",{parentName:"p"},"CRI-O")," on branch ",(0,r.kt)("inlineCode",{parentName:"p"},"release-1.18"),"."),(0,r.kt)("h3",{id:"build"},"Build"),(0,r.kt)("p",null,"To install with default buildtags using seccomp, use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"make\nsudo make install\n")),(0,r.kt)("p",null,"Otherwise, if you do not want to build ",(0,r.kt)("inlineCode",{parentName:"p"},"CRI-O")," with seccomp support you can add ",(0,r.kt)("inlineCode",{parentName:"p"},'BUILDTAGS=""')," when running make."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'make BUILDTAGS=""\nsudo make install\n')),(0,r.kt)("h4",{id:"install-with-ansible"},"Install with Ansible"),(0,r.kt)("p",null,"An ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/alvistack/ansible-role-cri_o"},"Ansible Role")," is also available to automate the above steps:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo su -\nmkdir -p ~/.ansible/roles\ncd ~/.ansible/roles\ngit clone https://github.com/alvistack/ansible-role-cri_o.git cri_o\ncd ~/.ansible/roles/cri_o\npip3 install --upgrade --ignore-installed --requirement requirements.txt\nmolecule converge\nmolecule verify\n")),(0,r.kt)("h4",{id:"build-tags"},"Build Tags"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CRI-O")," supports optional build tags for compiling support of various features.\nTo add build tags to the make option the ",(0,r.kt)("inlineCode",{parentName:"p"},"BUILDTAGS")," variable must be set."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"make BUILDTAGS='seccomp apparmor'\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Build Tag"),(0,r.kt)("th",{parentName:"tr",align:null},"Feature"),(0,r.kt)("th",{parentName:"tr",align:null},"Dependency"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"seccomp"),(0,r.kt)("td",{parentName:"tr",align:null},"syscall filtering"),(0,r.kt)("td",{parentName:"tr",align:null},"libseccomp")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"selinux"),(0,r.kt)("td",{parentName:"tr",align:null},"selinux process and mount labeling"),(0,r.kt)("td",{parentName:"tr",align:null},"libselinux")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"apparmor"),(0,r.kt)("td",{parentName:"tr",align:null},"apparmor profile support"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("none",null))))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CRI-O")," manages images with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/containers/image"},"containers/image"),", which uses the following buildtags."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Build Tag"),(0,r.kt)("th",{parentName:"tr",align:null},"Feature"),(0,r.kt)("th",{parentName:"tr",align:null},"Dependency"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containers_image_openpgp"),(0,r.kt)("td",{parentName:"tr",align:null},"use native golang pgp instead of cgo"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("none",null))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"containers_image_ostree_stub"),(0,r.kt)("td",{parentName:"tr",align:null},"disable use of ostree as an image transport"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("none",null))))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CRI-O")," also uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/containers/storage"},"containers/storage")," for managing container storage."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Build Tag"),(0,r.kt)("th",{parentName:"tr",align:null},"Feature"),(0,r.kt)("th",{parentName:"tr",align:null},"Dependency"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"exclude_graphdriver_btrfs"),(0,r.kt)("td",{parentName:"tr",align:null},"exclude btrfs as a storage option"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("none",null))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"btrfs_noversion"),(0,r.kt)("td",{parentName:"tr",align:null},"for building btrfs version < 3.16.1"),(0,r.kt)("td",{parentName:"tr",align:null},"btrfs")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"exclude_graphdriver_devicemapper"),(0,r.kt)("td",{parentName:"tr",align:null},"exclude devicemapper as a storage option"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("none",null))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"libdm_no_deferred_remove"),(0,r.kt)("td",{parentName:"tr",align:null},"don't compile deferred remove with devicemapper"),(0,r.kt)("td",{parentName:"tr",align:null},"devicemapper")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"exclude_graphdriver_overlay"),(0,r.kt)("td",{parentName:"tr",align:null},"exclude overlay as a storage option"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("none",null))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ostree"),(0,r.kt)("td",{parentName:"tr",align:null},"build storage using ostree"),(0,r.kt)("td",{parentName:"tr",align:null},"ostree")))),(0,r.kt)("h3",{id:"static-builds"},"Static builds"),(0,r.kt)("p",null,"It is possible to build a statically linked binary of CRI-O by using the\nofficially provided ",(0,r.kt)("a",{parentName:"p",href:"https://nixos.org/nix"},"nix")," package and the derivation of\nit ",(0,r.kt)("a",{parentName:"p",href:"../nix"},"within this repository"),". The builds are completely reproducible and\nwill create a ",(0,r.kt)("inlineCode",{parentName:"p"},"x86_64"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"amd64")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"aarch64"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"arm64")," stripped ELF binary for\n",(0,r.kt)("a",{parentName:"p",href:"https://www.gnu.org/software/libc"},"glibc"),". These binaries are integration\ntested as well and support the following features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"apparmor"),(0,r.kt)("li",{parentName:"ul"},"btrfs"),(0,r.kt)("li",{parentName:"ul"},"device mapper"),(0,r.kt)("li",{parentName:"ul"},"gpgme"),(0,r.kt)("li",{parentName:"ul"},"seccomp"),(0,r.kt)("li",{parentName:"ul"},"selinux")),(0,r.kt)("p",null,"To build the binaries locally either ",(0,r.kt)("a",{parentName:"p",href:"https://nixos.org/nix/download.html"},"install the nix package\nmanager")," or use the ",(0,r.kt)("inlineCode",{parentName:"p"},"make build-static"),"\ntarget which relies on the nixos/nix container image."),(0,r.kt)("p",null,"The overall build process can take a tremendous amount of CPU time depending on\nthe hardware. The resulting binaries should now be available within:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bin/static/crio"))),(0,r.kt)("p",null,"To build the binaries without any prepared container and via the already\ninstalled nix package manager, simply run the following command from the root\ndirectory of this repository:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"nix build -f nix\n")),(0,r.kt)("p",null,"The resulting binaries should be now available in ",(0,r.kt)("inlineCode",{parentName:"p"},"result/bin"),". To build the arm\nvariant of the binaries, just run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"nix build -f nix/default-arm64.nix\n")),(0,r.kt)("h4",{id:"creating-a-release-archive"},"Creating a release archive"),(0,r.kt)("p",null,"A release bundle consists of all static binaries, the man pages and\nconfiguration files like ",(0,r.kt)("inlineCode",{parentName:"p"},"00-default.conf"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"release-bundle")," target can be\nused to build a new release archive within the current repository:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"make release-bundle\n\u2026\nCreated ./bundle/cri-o.amd64.v1.20.0.tar.gz\n")),(0,r.kt)("h3",{id:"download-conmon"},"Download conmon"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/containers/conmon"},"conmon")," is a per-container daemon that ",(0,r.kt)("inlineCode",{parentName:"p"},"CRI-O")," uses to monitor container logs and exit information.\n",(0,r.kt)("inlineCode",{parentName:"p"},"conmon")," needs to be downloaded with ",(0,r.kt)("inlineCode",{parentName:"p"},"CRI-O"),"."),(0,r.kt)("p",null,"running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/containers/conmon\ncd conmon\nmake\nsudo make install\n")),(0,r.kt)("p",null,"will download conmon to your $PATH."),(0,r.kt)("h3",{id:"setup-cni-networking"},"Setup CNI networking"),(0,r.kt)("p",null,"A proper description of setting up CNI networking is given in the\n",(0,r.kt)("a",{parentName:"p",href:"/contrib/cni/README.md"},(0,r.kt)("inlineCode",{parentName:"a"},"contrib/cni")," README"),". But the gist is that you need to\nhave some basic network configurations enabled and CNI plugins installed on\nyour system."),(0,r.kt)("h3",{id:"cri-o-configuration"},"CRI-O configuration"),(0,r.kt)("p",null,"If you are installing for the first time, generate and install configuration files with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo make install.config\n")),(0,r.kt)("h3",{id:"validate-registries-in-registriesconf"},"Validate registries in registries.conf"),(0,r.kt)("p",null,"Edit ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/containers/registries.conf")," and verify that the registries option has valid values in it.  For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[registries.search]\nregistries = ['registry.access.redhat.com', 'registry.fedoraproject.org', 'quay.io', 'docker.io']\n\n[registries.insecure]\nregistries = []\n\n[registries.block]\nregistries = []\n")),(0,r.kt)("p",null,"For more information about this file see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/containers/image/blob/master/docs/containers-registries.conf.5.md"},"registries.conf(5)"),"."),(0,r.kt)("h4",{id:"optional---modify-verbosity-of-logs"},"Optional - Modify verbosity of logs"),(0,r.kt)("p",null,"Users can modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"log_level")," by specifying an overwrite like\n",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/crio/crio.conf.d/01-log-level.conf")," to change the verbosity of\nthe logs. Options are fatal, panic, error, warn, info (default), debug and\ntrace."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'[crio.runtime]\nlog_level = "info"\n')),(0,r.kt)("h4",{id:"optional---modify-capabilities-and-sysctls"},"Optional - Modify capabilities and sysctls"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"CRI-O")," uses the following capabilities:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'default_capabilities = [\n    "CHOWN",\n    "DAC_OVERRIDE",\n    "FSETID",\n    "FOWNER",\n    "SETGID",\n    "SETUID",\n    "SETPCAP",\n    "NET_BIND_SERVICE",\n    "KILL",\n]\n')),(0,r.kt)("p",null,"and no sysctls"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"default_sysctls = [\n]\n")),(0,r.kt)("p",null,"Users can change either default by adding overwrites to ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/crio/crio.conf.d"),"."),(0,r.kt)("h3",{id:"starting-cri-o"},"Starting CRI-O"),(0,r.kt)("p",null,"Running make install will download CRI-O into the folder"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"/usr/local/bin/crio\n")),(0,r.kt)("p",null,"You can run it manually there, or you can set up a systemd unit file with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo make install.systemd\n")),(0,r.kt)("p",null,"And let systemd take care of running CRI-O:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsudo systemctl enable crio\nsudo systemctl start crio\n")),(0,r.kt)("h3",{id:"using-cri-o"},"Using CRI-O"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Follow this ",(0,r.kt)("a",{parentName:"li",href:"tutorials/crictl.md"},"tutorial")," to quickly get started running simple pods and containers."),(0,r.kt)("li",{parentName:"ul"},"To run a full cluster, see ",(0,r.kt)("a",{parentName:"li",href:"tutorials/kubernetes.md"},"the instructions"),"."),(0,r.kt)("li",{parentName:"ul"},"To run with kubeadm, see ",(0,r.kt)("a",{parentName:"li",href:"tutorials/kubeadm.md"},"kubeadm instructions"),".")))}d.isMDXComponent=!0}}]);