"use strict";(self.webpackChunkgwoc_open_source=self.webpackChunkgwoc_open_source||[]).push([[8962],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2259:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:24},s="FALCO",c={unversionedId:"CNCF Projects/5.24_Falco",id:"CNCF Projects/5.24_Falco",isDocsHomePage:!1,title:"FALCO",description:"WHAT IS FALCO?",source:"@site/docs/CNCF Projects/5.24_Falco.md",sourceDirName:"CNCF Projects",slug:"/CNCF Projects/5.24_Falco",permalink:"/docs/CNCF Projects/5.24_Falco",tags:[],version:"current",sidebarPosition:24,frontMatter:{sidebar_position:24},sidebar:"tutorialSidebar",previous:{title:"CRI-O",permalink:"/docs/CNCF Projects/5.23_CRI-O"},next:{title:"Flux",permalink:"/docs/CNCF Projects/5.25_Flux"}},u=[{value:"WHAT IS FALCO?",id:"what-is-falco",children:[],level:2},{value:"WHAT DOES FALCO DO?",id:"what-does-falco-do",children:[],level:2},{value:"WHAT DOES FALCO CHECK FOR?",id:"what-does-falco-check-for",children:[],level:2},{value:"WHY FALCO?",id:"why-falco",children:[],level:2},{value:"BENEFITS OF USING FALCO",id:"benefits-of-using-falco",children:[],level:2},{value:"FALCO ARCHITECTURE",id:"falco-architecture",children:[],level:2},{value:"CONFIGURATION",id:"configuration",children:[],level:2},{value:"DEVELOPING",id:"developing",children:[],level:2},{value:"FEATURED VIDEOS",id:"featured-videos",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"falco"},"FALCO"),(0,i.kt)("img",{src:"https://raw.githubusercontent.com/falcosecurity/community/master/logo/primary-logo.png",width:"360"}),(0,i.kt)("h2",{id:"what-is-falco"},"WHAT IS FALCO?"),(0,i.kt)("p",null,"The Falco Project is an open source runtime security tool originally built by ",(0,i.kt)("a",{parentName:"p",href:"https://sysdig.com/"},"Sysdig"),", Inc. Falco was donated to the CNCF and is now a ",(0,i.kt)("a",{parentName:"p",href:"https://www.cncf.io/blog/2020/01/08/toc-votes-to-move-falco-into-cncf-incubator/"},"CNCF incubating project"),"."),(0,i.kt)("p",null,"Falco makes it easy to consume kernel events, and enrich those events with information from Kubernetes and the rest of the cloud native stack.\nFalco has a rich set of security rules specifically built for Kubernetes, Linux, and cloud-native.\nIf a rule is violated in a system, Falco will send an alert notifying the user of the violation and its severity.\nFalco started life as an open source behavioral activity monitoring agent.\nDescribed as a mix between snort, ossec, and strace, Rather than using a signature-based security monitoring approach, which looks for specific exploits and vulnerabilities, Falco looks for suspicious system activities, which show an attacker may be at work."),(0,i.kt)("img",{src:"https://falco.org/img/diagram-home.png",width:"360"}),(0,i.kt)("h2",{id:"what-does-falco-do"},"WHAT DOES FALCO DO?"),(0,i.kt)("p",null,"Falco uses system calls to secure and monitor a system, by:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Parsing the Linux system calls from the kernel at runtime"),(0,i.kt)("li",{parentName:"ul"},"Asserting the stream against a powerful rules engine"),(0,i.kt)("li",{parentName:"ul"},"Alerting when a rule is violated")),(0,i.kt)("h2",{id:"what-does-falco-check-for"},"WHAT DOES FALCO CHECK FOR?"),(0,i.kt)("p",null,"Falco ships with a default set of rules that check the kernel for unusual behavior such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Privilege escalation using privileged containers"),(0,i.kt)("li",{parentName:"ul"},"Namespace changes using tools like setns"),(0,i.kt)("li",{parentName:"ul"},"Read/Writes to well-known directories such as /etc, /usr/bin, /usr/sbin, etc"),(0,i.kt)("li",{parentName:"ul"},"Creating symlinks"),(0,i.kt)("li",{parentName:"ul"},"Ownership and Mode changes"),(0,i.kt)("li",{parentName:"ul"},"Unexpected network connections or socket mutations"),(0,i.kt)("li",{parentName:"ul"},"Spawned processes using execve"),(0,i.kt)("li",{parentName:"ul"},"Executing shell binaries such as ",(0,i.kt)("inlineCode",{parentName:"li"},"sh"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"bash"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"csh"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"zsh"),", etc"),(0,i.kt)("li",{parentName:"ul"},"Executing SSH binaries such as ",(0,i.kt)("inlineCode",{parentName:"li"},"ssh"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"scp"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"sftp"),", etc"),(0,i.kt)("li",{parentName:"ul"},"Mutating Linux coreutils executables"),(0,i.kt)("li",{parentName:"ul"},"Mutating login binaries"),(0,i.kt)("li",{parentName:"ul"},"A shell is running inside a container or pod in Kubernetes."),(0,i.kt)("li",{parentName:"ul"},"A container is running in privileged mode, or is mounting a sensitive path, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"/proc"),", from the host."),(0,i.kt)("li",{parentName:"ul"},"A server process is spawning a child process of an unexpected type."),(0,i.kt)("li",{parentName:"ul"},"Unexpected read of a sensitive file, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"/etc/shadow"),"."),(0,i.kt)("li",{parentName:"ul"},"A non-device file is written to ",(0,i.kt)("inlineCode",{parentName:"li"},"/dev"),"."),(0,i.kt)("li",{parentName:"ul"},"A standard system binary, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"ls"),", is making an outbound network connection."),(0,i.kt)("li",{parentName:"ul"},"A privileged pod is started in a Kubernetes cluster."),(0,i.kt)("li",{parentName:"ul"},"Mutating shadowutil or passwd executables such as shadowconfig, pwck, chpasswd, getpasswd, change, useradd, etc, and others.")),(0,i.kt)("h2",{id:"why-falco"},"WHY FALCO?"),(0,i.kt)("p",null,"Signature-based approaches are engaged in a never-ending game of catch up with the constant stream of new threats. Behavioral monitoring based approaches, in contrast, look at what is happening on a system and can immediately alert if something malicious occurs."),(0,i.kt)("p",null,"With Falco, you can create detection rules to define unexpected application behavior. These rules can be enriched via context from the Kubernetes environments. Your teams can detect policy violations using community-sourced detections of malicious activity and CVE exploits. They can then alert by plugging Falco into your current security response workflows and processes."),(0,i.kt)("h2",{id:"benefits-of-using-falco"},"BENEFITS OF USING FALCO"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"Strengthen container security:")),(0,i.kt)("img",{src:"https://sysdig.com/wp-content/uploads/icon-runtime-security.svg",width:"100"}))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The flexible rules engine allows you to describe any type of host or container behavior or activity.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"Reduce risk via immediate alerts:")))),(0,i.kt)("img",{src:"https://sysdig.com/wp-content/uploads/icon-alert.svg",width:"100"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can immediately respond to policy violation alerts and integrate Falco within your response workflows.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"Leverage most current detection rules:")))),(0,i.kt)("img",{src:"https://sysdig.com/wp-content/uploads/icon-detection.svg",width:"100"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Falco out-of-the box rules alert on malicious activity and CVE exploits.")),(0,i.kt)("h2",{id:"falco-architecture"},"FALCO ARCHITECTURE"),(0,i.kt)("p",null," Falco can detect and alert on any behavior that involves making Linux system calls.\nFalco alerts are triggered based on specific system calls, arguments, and propertiesof the calling process. Falco operates at the user space and kernel space. The\nsystem calls are interpreted by the Falco kernel module. The syscalls are then\nanalyzed using the libraries in the userspace. The events are then filtered using a rules engine where the Falco rules are configured. Suspicious events are then\nalerted to outputs that are configured as Syslog, files, Standard Output, and others."),(0,i.kt)("img",{src:"https://falco.org/docs/images/falco_architecture.png",width:"360"}),"## COMPONENTS OF FALCO Falco is composed of three main components:",(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},(0,i.kt)("strong",{parentName:"em"},"Userspace program:"))," - is the CLI tool falco that you can use to interact with Falco. The userspace program handles signals, parses information from a Falco driver, and sends alerts.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},(0,i.kt)("strong",{parentName:"em"},"Configuration:"))," - defines how Falco is run, what rules to assert, and how to perform alerts. For more information, see Configuration.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},(0,i.kt)("strong",{parentName:"em"},"Driver:"))," - is a software that adheres to the Falco driver specification and sends a stream of system call information. You cannot run Falco without installing a driver. Currently, Falco supports the following drivers:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"(Default) Kernel module built on libscap and libsinsp C++ libraries"),(0,i.kt)("li",{parentName:"ul"},"BPF probe built from the same modules"),(0,i.kt)("li",{parentName:"ul"},"Userspace instrumentation")))),(0,i.kt)("h2",{id:"configuration"},"CONFIGURATION"),(0,i.kt)("p",null,"Falco's configuration file is a YAML file containing a collection of ",(0,i.kt)("inlineCode",{parentName:"p"},"key: value")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"key: [value list]")," pairs.\nAny configuration option can be overridden on the command line via the ",(0,i.kt)("inlineCode",{parentName:"p"},"-o/--option key=value")," flag. For ",(0,i.kt)("inlineCode",{parentName:"p"},"key: [value list]")," options, you can specify individual list items using ",(0,i.kt)("inlineCode",{parentName:"p"},"--option key.subkey=value"),"."),(0,i.kt)("h2",{id:"developing"},"DEVELOPING"),(0,i.kt)("p",null,"Falco is designed to be extensible such that it can be built into cloud-native applications and infrastructure."),(0,i.kt)("p",null,"Falco has a ",(0,i.kt)("a",{parentName:"p",href:"https://falco.org/docs/grpc/"},"gRPC")," endpoint and an API defined in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/falcosecurity/falco/blob/master/userspace/falco/outputs.proto"},"protobuf"),".\nThe Falco Project supports various SDKs for this endpoint."),(0,i.kt)("h2",{id:"featured-videos"},"FEATURED VIDEOS"),(0,i.kt)("p",null," To learn more about FALCO watch these videos:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"LINKS"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://youtu.be/nGqWskXRSmo?list=PLgVVUpW8NIJB-HFzz4WDPSGFn4pUF4fpe"},"Video 1."))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://www.youtube.com/watch?v=rBqBrYESryY"},"Video 2."))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://www.youtube.com/watch?v=JQxtY0966xo"},"Video 3."))))))}d.isMDXComponent=!0}}]);