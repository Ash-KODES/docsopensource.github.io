"use strict";(self.webpackChunkgwoc_open_source=self.webpackChunkgwoc_open_source||[]).push([[2199],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),h=a,m=p["".concat(c,".").concat(h)]||p[h]||u[h]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4975:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:15},c="ETCD",l={unversionedId:"CNCF Projects/5.15_etcd",id:"CNCF Projects/5.15_etcd",isDocsHomePage:!1,title:"ETCD",description:"What is etcd?",source:"@site/docs/CNCF Projects/5.15_etcd.md",sourceDirName:"CNCF Projects",slug:"/CNCF Projects/5.15_etcd",permalink:"/docs/CNCF Projects/5.15_etcd",tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"The Update Framework",permalink:"/docs/CNCF Projects/5.14_TUF"},next:{title:"Open Policy Agent",permalink:"/docs/CNCF Projects/5.16_Open_Policy_Agent"}},d=[{value:"What is etcd?",id:"what-is-etcd",children:[],level:2},{value:"Why etcd?",id:"why-etcd",children:[],level:2},{value:"etcd and Kubernetes",id:"etcd-and-kubernetes",children:[],level:2},{value:"CoreOS and the history and maintenance of etcd",id:"coreos-and-the-history-and-maintenance-of-etcd",children:[],level:2}],u={toc:d};function p(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"etcd"},"ETCD"),(0,i.kt)("h2",{id:"what-is-etcd"},"What is etcd?"),(0,i.kt)("img",{src:"https://github.com/mayankkuthar/Reference-Images/blob/main/etcd.png?raw=true"}),(0,i.kt)("p",null,"etcd ",(0,i.kt)("inlineCode",{parentName:"p"},"(pronounced et-see-dee)")," is an open source distributed key-value store for storing and managing the vital data that distributed systems require to function. It is most well-known for managing\nthe configuration, state, and metadata for Kubernetes, a prominent container orchestration technology."),(0,i.kt)("p",null,"Containerized workloads, like other distributed workloads, have complex management needs that get more complicated as the burden grows. Kubernetes makes managing complex workloads easier by coordinating activities like setup, deployment, service discovery, load balancing,\njob scheduling, and health monitoring across all clusters, which may operate on many computers in different locations."),(0,i.kt)("p",null,"However, in order to achieve this coordination, Kubernetes requires a data store that offers a single, consistent source of truth about the status of the system\u2014all of its clusters and pods, as well as the application instances that reside within them\u2014at any given moment.\nThe data store that was utilised to build and maintain this version of the truth is called etcd."),(0,i.kt)("p",null,'etcd is a suitable choice for managing crucial system and metadata across clusters of any distributed application and plays a similar function for Cloud Foundry\u2014the open source,\nmulticloud Platform-as-a-Service (PaaS). The term "etcd" derives from the Linux directory structure\'s naming convention: All system configuration files for a single system are\nstored in the \u201c/etc\u201d subdirectory under UNIX. The letter "d" stands for "distributed."'),(0,i.kt)("h2",{id:"why-etcd"},"Why etcd?"),(0,i.kt)("p",null,"Serving as the data backbone that keeps a dispersed workload operating is no easy feat. But etcd is made for the job, with the following features built in from the start:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Every node in an etcd cluster has access to the whole data store, which is ",(0,i.kt)("inlineCode",{parentName:"li"},"fully replicated"),"."),(0,i.kt)("li",{parentName:"ul"},"etcd is meant to be ",(0,i.kt)("inlineCode",{parentName:"li"},"highly available"),", with no single point of failure and the ability to gracefully suffer hardware failures and network partitions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Consistently reliable")," : Every data \u2018read' across all clusters delivers the most recent data 'write'."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Fast")," : etcd has been tested at a rate of 10,000 writes per second."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Secure")," : etcd supports automated Transport Layer Security (TLS) and SSL client certificate authentication. Administrators should establish role-based access restrictions within the deployment and ensure that team members dealing with etcd are limited to the least-privileged degree of access necessary to execute their duties since etcd contains critical and highly sensitive configuration data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Basic")," : Any programme may read or write data to etcd using normal HTTP/JSON technologies, from simple web applications to extremely sophisticated container orchestration engines like Kubernetes.")),(0,i.kt)("img",{src:"https://github.com/mayankkuthar/Reference-Images/blob/main/etcd%20features.PNG?raw=true"}),(0,i.kt)("h2",{id:"etcd-and-kubernetes"},"etcd and Kubernetes"),(0,i.kt)("p",null,'etcd is one of the fundamental Kubernetes components, and it acts as the primary key-value store for building a fault-tolerant Kubernetes cluster. The status data for each cluster is stored in etcd by the Kubernetes API server. Kubernetes monitors this data and utilises etcd\'s "watch" function to adjust itself when changes occur. When the values reflecting the cluster\'s real and ideal states diverge,\nthe "watch" function might trigger a reaction.'),(0,i.kt)("h2",{id:"coreos-and-the-history-and-maintenance-of-etcd"},"CoreOS and the history and maintenance of etcd"),(0,i.kt)("p",null,"etcd was developed by the same team that produced CoreOS Container Linux, a widely used container operating system that can be effectively operated and maintained on a large scale. They created etcd on Raft to coordinate several copies of Container Linux at the same time in order to assure application uptime."),(0,i.kt)("p",null,"The developers gave etcd to the Cloud Native Computing Foundation (CNCF) in December 2018, a nonprofit organisation that keeps etcd's source code, domains, hosted services, cloud infrastructure, and other project property open source for the container-based cloud development community. Red Hat and CoreOS have combined."))}p.isMDXComponent=!0}}]);