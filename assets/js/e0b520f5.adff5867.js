"use strict";(self.webpackChunkgwoc_open_source=self.webpackChunkgwoc_open_source||[]).push([[3987],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),h=i,p=m["".concat(l,".").concat(h)]||m[h]||d[h]||o;return n?r.createElement(p,a(a({ref:t},u),{},{components:n})):r.createElement(p,a({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1385:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],s={sidebar_position:34},l="Linux Kernal",c={unversionedId:"Popular_Projects/6.33_Linux_kernal",id:"Popular_Projects/6.33_Linux_kernal",isDocsHomePage:!1,title:"Linux Kernal",description:"A computer's primary function is to execute a programme, which is a preset set of instructions. A process is a term used to describe a programme that is currently running.",source:"@site/docs/Popular_Projects/6.33_Linux_kernal.md",sourceDirName:"Popular_Projects",slug:"/Popular_Projects/6.33_Linux_kernal",permalink:"/docs/Popular_Projects/6.33_Linux_kernal",tags:[],version:"current",sidebarPosition:34,frontMatter:{sidebar_position:34},sidebar:"tutorialSidebar",previous:{title:"Flask",permalink:"/docs/Popular_Projects/6.32_Flask"},next:{title:"Go Programming Language",permalink:"/docs/Popular_Projects/6.34_Go_Programming_Lanuage"}},u=[{value:"Architecture and features",id:"architecture-and-features",children:[],level:2},{value:"Development",id:"development",children:[{value:"Developer community",id:"developer-community",children:[],level:3},{value:"Source code management",id:"source-code-management",children:[],level:3},{value:"Submitting code to the kernel",id:"submitting-code-to-the-kernel",children:[],level:3},{value:"Programming language and coding style",id:"programming-language-and-coding-style",children:[],level:3},{value:"GNU toolchain",id:"gnu-toolchain",children:[],level:3}],level:2},{value:"GitHub Repo",id:"github-repo",children:[],level:2}],d={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"linux-kernal"},"Linux Kernal"),(0,o.kt)("p",{align:"center"},(0,o.kt)("img",{src:"https://github.com/mayankkuthar/Reference-Images/blob/main/linux.jpg?raw=true"})),(0,o.kt)("p",null,"A computer's primary function is to execute a programme, which is a preset set of instructions. A process is a term used to describe a programme that is currently running.\nMost special purpose computers are now designed to execute a single process, but a sophisticated system like a general purpose computer is designed to run multiple processes\nat the same time. Any process necessitates hardware resources such as memory, processor time, and storage space, among others."),(0,o.kt)("p",null,"In a General Purpose Computer that is executing multiple processes at the same time, we require a middle layer to manage the distribution of the computer's hardware resources\nefficiently and fairly across all of the processes. The kernel is the term for the middle layer. The kernel essentially virtualizes the computer's common hardware resources to\nprovide each process with its own virtual resources. This gives the impression that the process is the only one running on the machine. In addition, the kernel is in charge of\npreventing and resolving disputes between processes."),(0,o.kt)("p",null,"The Linux kernel is a Unix-like operating system kernel that is free and open-source, monolithic, modular, and multitasking. Linus Torvalds invented and developed it\nfor his i386-based PC in 1991, and it was quickly accepted as the kernel for the GNU operating system, which was built as a free replacement for UNIX. It has produced\na vast variety of operating system distributions, often referred to as Linux, since then."),(0,o.kt)("p",null,"Linux is used on a wide range of computing platforms, including embedded devices, mobile devices (including Android), personal computers, servers, mainframes, and supercomputers.\nIt can be customised for specific architectures and use cases using a set of simple commands (rather than manually modifying the source code before compilation);\nprivileged users can even fine-tune kernel parameters at runtime. The GNU extensions of GCC to the normal C programming language, as well as architecture-specific instructions,\nare used to write the majority of the Linux kernel code (ISA). This results in a highly optimised executable (vmlinux) in terms of memory use and task execution times."),(0,o.kt)("p",null,"The Linux kernel mailing list is where day-to-day development conversations take place (LKML). The version control system git, which Torvalds designed as a custom substitute\nfor BitKeeper, is used to track changes. Linux is published under the GNU General Public License version 2 (GPL-2.0-only) with an explicit syscall exception (Linux-syscall-note),\nbut it also includes files that are licenced under other comparable licences."),(0,o.kt)("h2",{id:"architecture-and-features"},"Architecture and features"),(0,o.kt)("p",null,"Linux is a monolithic kernel with a modular design (it can insert and remove loadable kernel modules at runtime, for example), and it supports most capabilities that were\npreviously only available in closed source kernels of non-free operating systems. On the official manual pages, the UNIX and Unix-like operating systems convention is used\nthroughout the rest of the text. The numbers after the names of commands, interfaces, and other features indicate the section (i.e., the sort of OS component or feature) to\nwhich they belong (for example, execve(2) refers to a system call, while exec(3) refers to a userspace library wrapper)."),(0,o.kt)("p",null,"The following list and sections provide a non-exhaustive overview of Linux architectural design as well as some of its most notable features."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"On SMP and NUMA architectures, concurrent computing and even real parallel execution of numerous processes at once (each with one or more threads of execution) is possible\n(if there are enough CPU cores for ready-to-run jobs)."),(0,o.kt)("li",{parentName:"ul"},"Before commencing compilation, select and configure hundreds of kernel features and drivers (using one of the make ",(0,o.kt)("inlineCode",{parentName:"li"},"*config")," family of commands).fine-tuning kernel behaviour\nat run-time (using the sysctl(8) interface to /proc/sys/) and manipulation of kernel settings before booting (typically by inserting instructions within the lines of the GRUB2\nmenu)."),(0,o.kt)("li",{parentName:"ul"},"Configuration (again, using the make ",(0,o.kt)("inlineCode",{parentName:"li"},"*config")," commands) and run-time modifications of the policies of the task schedulers that allow preemptive multitasking\n(both in user mode and, since the 2.6 series, in kernel mode) via nice(2), setpriority(2), and the family of ",(0,o.kt)("inlineCode",{parentName:"li"},"sched syscalls"),"; the Completely Fair Scheduler (CFS)\nhas been the default scheduler of Linux since 2007, and it uses a red-black tree that can search, and insert."),(0,o.kt)("li",{parentName:"ul"},"With paged virtual memory, you may control your memory in a more advanced way."),(0,o.kt)("li",{parentName:"ul"},"Mechanism for inter-process communication and synchronisation.")),(0,o.kt)("h2",{id:"development"},"Development"),(0,o.kt)("h3",{id:"developer-community"},"Developer community"),(0,o.kt)("p",null,"The Linux kernel developer community has around 5000\u20136000 members. According to the Linux Foundation's \"2017 State of Linux Kernel Development,\" which included commits for\nreleases 4.8 to 4.13, roughly 1500 developers contributed from about 200-250 firms on average. A little more than 16% of the code was contributed by the top 30 developers.\nIntel (13.1 percent) and Red Hat (7.2 percent), Linaro (5.6 percent), IBM (4.1 percent), and the 'none' (8.2 percent) and 'unknown' (4.1 percent) categories are the top donors\nin terms of companies."),(0,o.kt)("h3",{id:"source-code-management"},"Source code management"),(0,o.kt)("p",null,"Git is a source code management system used by the Linux development community. Git users use ",(0,o.kt)("inlineCode",{parentName:"p"},"git-clone")," to clone the newest version of Torvalds' tree and ",(0,o.kt)("inlineCode",{parentName:"p"},"git-pull")," to\nmaintain it up to date. Contributions are sent in the form of patches, which are text messages on the LKML (and often also on other mailing lists dedicated to particular\nsubsystems). The patches must follow a set of criteria and use a formal language to indicate, among other things, which lines of code should be removed and which should\nbe added to the given files. These patches can be processed automatically so that system administrators can apply them to make only minor modifications to the code or to\nupgrade to the next version in stages. Linux is distributed also in GNU zip (gzip) and bzip2 formats."),(0,o.kt)("h3",{id:"submitting-code-to-the-kernel"},"Submitting code to the kernel"),(0,o.kt)("p",null,"A developer who wishes to make a modification to the Linux kernel must first create and test the change. The modification will be provided as a single patch or as numerous\npatches of source code, depending on how big the change is and how many subsystems it affects. These changes are submitted as e-mails to the subsystem's maintainer, with the\nrelevant mailing list in Cc, if the subsystem is maintained by a single maintainer. The mailing list's maintainer and readers will review the patches and provide feedback.\nThe subsystem maintainer accepts the patches in the relevant Git kernel tree once the review process is completed. If the changes to the Linux kernel are regarded essential\nenough, Torvalds will get a pull request for the patches within a few days. Otherwise, at the next merging window, a pull request will be forwarded to Torvalds. The merge\nwindow normally lasts two weeks and begins right after the previous kernel version is released. The Credits directory in the Git kernel source tree lists all developers who\nhave contributed to the Linux kernel, and the Maintainers directory lists all subsystem maintainers."),(0,o.kt)("h3",{id:"programming-language-and-coding-style"},"Programming language and coding style"),(0,o.kt)("p",null,"Linux is written in a customised C programming language that is supported by GCC, a compiler that extends the C standard in many ways, including the use of inline chunks of\ncode written in the target architecture's assembly language (in GCC's \"AT&T-style\" syntax). Since 2002, all code must follow the Linux Kernel Coding Style, which consists of\n21 guidelines."),(0,o.kt)("h3",{id:"gnu-toolchain"},"GNU toolchain"),(0,o.kt)("p",null,"The GNU Compiler Collection (GCC or GNU cc) is the default compiler for the mainline Linux sources and it is invoked by a utility called make. Then, the GNU Assembler\n(more often called GAS or GNU as) outputs the object files from the GCC generated assembly code. Finally, the GNU Linker (GNU ld) is used to produce a statically linked\nexecutable kernel file called vmlinux. Both as and ld are part of GNU Binary Utilities (binutils). The above-mentioned tools are collectively known as the GNU toolchain."),(0,o.kt)("h2",{id:"github-repo"},"GitHub Repo"),(0,o.kt)("p",{align:"center"},(0,o.kt)("img",{src:"https://user-images.githubusercontent.com/39026182/136695348-fa7697a3-caea-4036-82fc-b10bb2f111c1.PNG"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Link -")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/torvalds/linux"},"https://github.com/torvalds/linux")))}m.isMDXComponent=!0}}]);