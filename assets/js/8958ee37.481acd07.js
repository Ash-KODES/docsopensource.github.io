"use strict";(self.webpackChunkgwoc_open_source=self.webpackChunkgwoc_open_source||[]).push([[6185],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6319:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:49},s="Nx",p={unversionedId:"Popular_Projects/6.48_nx",id:"Popular_Projects/6.48_nx",isDocsHomePage:!1,title:"Nx",description:"What is Nx?",source:"@site/docs/Popular_Projects/6.48_nx.md",sourceDirName:"Popular_Projects",slug:"/Popular_Projects/6.48_nx",permalink:"/docs/Popular_Projects/6.48_nx",tags:[],version:"current",sidebarPosition:49,frontMatter:{sidebar_position:49},sidebar:"tutorialSidebar",previous:{title:"SASS",permalink:"/docs/Popular_Projects/6.47_Sass"},next:{title:"RxJs",permalink:"/docs/Popular_Projects/6.49_RxJS"}},c=[{value:"What is Nx?",id:"what-is-nx",children:[{value:"Note :",id:"note-",children:[],level:3}],level:2},{value:"Getting Up and Running with an Nx Workspace",id:"getting-up-and-running-with-an-nx-workspace",children:[{value:"Step 1: Create an Nx Workspace",id:"step-1-create-an-nx-workspace",children:[],level:3},{value:"Generate a New Project: The <code>create-nx-workspace</code> Command",id:"generate-a-new-project-the-create-nx-workspace-command",children:[],level:3},{value:"Generate a New Project: The <code>ng new</code> Command",id:"generate-a-new-project-the-ng-new-command",children:[],level:3},{value:"Add Nx to an Existing Project",id:"add-nx-to-an-existing-project",children:[],level:3},{value:"Step 2: Generate Angular Applications",id:"step-2-generate-angular-applications",children:[],level:3},{value:"Step 3: Generate Libs",id:"step-3-generate-libs",children:[],level:3}],level:2},{value:"What to do with Nx?",id:"what-to-do-with-nx",children:[],level:2}],d={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"nx"},"Nx"),(0,o.kt)("p",{align:"center"},(0,o.kt)("img",{src:"https://github.com/mayankkuthar/Reference-Images/blob/main/nx.png?raw=true",height:"250",width:"300"})),(0,o.kt)("h2",{id:"what-is-nx"},"What is Nx?"),(0,o.kt)("p",null,"The team at Nrwl built and maintains Nx, an open source toolkit for enterprise applications. It's built on their time at Google and assisting Fortune 500 companies c\nreate ambitious Angular applications."),(0,o.kt)("p",null,"Nx is an Angular CLI extension that consists of the following components:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"@nrwl/schematics")," is a collection of schematics for project and code production."),(0,o.kt)("li",{parentName:"ul"},"A assistance library for common tasks like data persistence and testing (@nrwl/nx) using NgRx."),(0,o.kt)("li",{parentName:"ul"},"A set of binaries for formatting, linting, and code base analysis that may be executed from the terminal.")),(0,o.kt)("h3",{id:"note-"},"Note :"),(0,o.kt)("p",null,"Learn more about Nx by visiting ",(0,o.kt)("a",{parentName:"p",href:"https://nrwl.io/nx"},"nrwl.io/nx")),(0,o.kt)("p",null,"An Nx Workspace is an Angular CLI project that is set up to facilitate working with various Angular apps and libraries in a single repo more dependable. It also aids in the\narchitecture approach of having a thin layer at the app level (an app NgModule that handles configuration) and the rest in libs that can be app specific (feature modules) or\nreusable across apps (component libraries, utilities, and services)."),(0,o.kt)("h2",{id:"getting-up-and-running-with-an-nx-workspace"},"Getting Up and Running with an Nx Workspace"),(0,o.kt)("p",null,"Let's take a look at how to build up a workspace's first architecture structure. Let's pretend we're building a platform for a podcast show. We intend to create a user-facing\napp with information about the podcast and a list of episodes, as well as an admin interface for controlling the podcast show details. We've also discovered that certain\ncomponents and logic will be shared by both of these apps."),(0,o.kt)("h3",{id:"step-1-create-an-nx-workspace"},"Step 1: Create an Nx Workspace"),(0,o.kt)("p",null,"Because Nx is an Angular CLI plugin, building a Nx Workspace requires either starting a new CLI project or adding Nx to an existing one. The current major version of Nx (6.x)\nis compatible with the latest Angular CLI version (6.x). As a result, utilising the Angular CLI to create a Nx Workspace is required."),(0,o.kt)("p",null,"You can create a new Nx Workspace in one of two ways: by using a binary given by ",(0,o.kt)("inlineCode",{parentName:"p"},"@nrwl/schematic"),"s or by using the Angular CLI ",(0,o.kt)("inlineCode",{parentName:"p"},"ng new")," command. Because the ",(0,o.kt)("inlineCode",{parentName:"p"},"ng new")," command\ntakes some additional steps, the binary is the current suggested method. But we'll go over both of them here."),(0,o.kt)("h3",{id:"generate-a-new-project-the-create-nx-workspace-command"},"Generate a New Project: The ",(0,o.kt)("inlineCode",{parentName:"h3"},"create-nx-workspace")," Command"),(0,o.kt)("p",null,"A binary script that implements the command ",(0,o.kt)("inlineCode",{parentName:"p"},"create-nx-workspace")," may be found in the ",(0,o.kt)("inlineCode",{parentName:"p"},"@nrwl/schematics")," library. We can use it by first installing ",(0,o.kt)("inlineCode",{parentName:"p"},"@nrwl/schematics")," on a global\nlevel. Because a Nx Workspace is essentially an Angular CLI workspace, we'll probably want to install the Angular CLI globally as well. With the following command,\nwe can perform both:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@nrwl/schematics @angular/cli npm install -g")),(0,o.kt)("p",null,"We can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"create-nx-workspace")," command to build a new Nx Workspace now that we have these installed:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"podcast-platform-create-nx-workspace")),(0,o.kt)("p",null,"This will create a new Nx Workspace folder named podcast-platform in the current working directory (where the script was run) with no applications or libs to begin with...just\nthe structure. In the next stage, we'll look at how to add apps."),(0,o.kt)("h3",{id:"generate-a-new-project-the-ng-new-command"},"Generate a New Project: The ",(0,o.kt)("inlineCode",{parentName:"h3"},"ng new")," Command"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"create-nx-workspace")," command is used to run the ``ng new",(0,o.kt)("inlineCode",{parentName:"p"},"command with the options required to use the Nx schematics to construct a new workspace. We could do that process\nmanually if we wanted to. However, as of the time of writing, there is a tiny issue with Nx that necessitates a workaround when creating a new workspace. Before performing\nthe"),"ng new``` command, we must first install the NgRx schematics globally. The following command can be used to accomplish this:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"npm install -g @ngrx/schematics")),(0,o.kt)("p",null,"With that installed, we can use the Angular CLI new command and to create our new Nx Workspace:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ng new podcast-platform")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"  --collection=@nrwl/schematics")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"  --directory=podcast-platform")),(0,o.kt)("p",null,"We notify the Angular CLI that we want to use the Nx schematics collection and its ",(0,o.kt)("inlineCode",{parentName:"p"},"new")," command with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--collection")," option. The ",(0,o.kt)("inlineCode",{parentName:"p"},"--directory")," option instructs the\nAngular CLI where the workspace files should be saved."),(0,o.kt)("p",null,"We can accomplish this manually, but if we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"create-nx-workspace")," command, everything is taken care of for us!"),(0,o.kt)("h3",{id:"add-nx-to-an-existing-project"},"Add Nx to an Existing Project"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," command in the Angular CLI (version 6.x and higher) can be used to add items to an existing Angular CLI workspace. If we already have a workspace set up\n(with only one app project), we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," command to add ",(0,o.kt)("inlineCode",{parentName:"p"},"@nrwl/schematics")," to it, and it will take care of installing the required dependencies and shifting files\naround to match the structure of a Nx Workspace:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ng add @nrwl/schematics")),(0,o.kt)("h3",{id:"step-2-generate-angular-applications"},"Step 2: Generate Angular Applications"),(0,o.kt)("p",null,"A schematic named ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," in the Nx schematics collection can be used to add a new Angular application project to the workspace. When generating a new app, it has numerous options\n(which we can see if we run ",(0,o.kt)("inlineCode",{parentName:"p"},"ng generate app --help"),"). Let's utilise that to develop the user-facing app and the admin app for our Nx Workspace, and we'll use the routing flag\nto add the beginning elements for ",(0,o.kt)("inlineCode",{parentName:"p"},"routing")," setup (the router module, a default route, and a router outlet)."),(0,o.kt)("p",null,"To add the user-facing app (which we'll call ",(0,o.kt)("inlineCode",{parentName:"p"},"website"),"), run the following create command:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ng generate app website --routing")),(0,o.kt)("p",null,"To add the admin app (which we'll call ",(0,o.kt)("inlineCode",{parentName:"p"},"admin"),"), we may use the generate command:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ng generate app admin --routing")),(0,o.kt)("p",null,"Running these will result in four new projects created within the ",(0,o.kt)("inlineCode",{parentName:"p"},"angular.json")," file (the two apps and an end to end test suite, or e2e, for each of them)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  . . .\n  "projects": {\n    "website": {\n      . . .\n    },\n    "website-e2e": {\n      . . .\n    },\n    "admin": {\n      . . .\n    },\n    "admin-e2e": {\n      . . .\n    }\n  },\n  . . .\n}\n')),(0,o.kt)("p",null,"And it will put the source code for those projects in the ",(0,o.kt)("inlineCode",{parentName:"p"},"apps")," directory in the workspace."),(0,o.kt)("p",null,"With the inclusion of the routing code we asked the Angular CLI to add for us with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--routing")," flag, that source code will be comparable to the app code the Angular\nCLI sets up for a new project."),(0,o.kt)("h3",{id:"step-3-generate-libs"},"Step 3: Generate Libs"),(0,o.kt)("p",null,"Outside of setup and configuration, libs in a Nx Workspace are intended to be the home for all of your application code. Feature modules, routed modules, shared modules,\nreusable component modules, and so on are examples. These can either be placed directly in the libs directory or nested to aid structure and reasoning."),(0,o.kt)("p",null,"Let's start by making some libraries for the code that will power our podcast apps. A schematic named ",(0,o.kt)("inlineCode",{parentName:"p"},"lib")," may be found in the Nx schematics collection and can be used to\nconstruct new libs. The lib schematic, like the ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," schematic, has various options that can be seen by running ",(0,o.kt)("inlineCode",{parentName:"p"},"ng create lib --help"),". When we create our libs, we'll use some\nof the routing parameters as well as the directory option."),(0,o.kt)("h2",{id:"what-to-do-with-nx"},"What to do with Nx?"),(0,o.kt)("p",null,"We can utilise the Angular CLI schematics to scaffold out components, directives, sub modules, and more throughout our libs, and we can write specs for that code within those\nlibs (using the ",(0,o.kt)("inlineCode",{parentName:"p"},"ng test project-name>")," command). Each team can own a lib (or libs) and have a manageable manner to interact with that code base if we have numerous teams."),(0,o.kt)("p",null,"We can serve/build individual apps by using the project name along with those commands (",(0,o.kt)("inlineCode",{parentName:"p"},"ng serve admin")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"ng serve website"),"). And we can configure the port to\nuse for each app in the ",(0,o.kt)("inlineCode",{parentName:"p"},"angular.json")," file so that we can serve up each app concurrently (via the ",(0,o.kt)("inlineCode",{parentName:"p"},"projects/<project-name>/architect/serve/options/port")," property in\nthe json object)."),(0,o.kt)("p",null,"An Nx workspace has a set structure and pattern beyond the fundamental application scaffolding and development workflow, and because of this, Nx can analyse the code base\nand determine if the architecture and usage are as expected, as well as grasp the layout and dependencies. Nx has commands to help auto-format your code (using Prettier),\ndisplay a visual dependency graph of your Angular modules, and even tag library types in the ",(0,o.kt)("inlineCode",{parentName:"p"},"nx.json")," file so we can specify intent and get notified (via linting rules\nset up in ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),") when we attempt to use lib code in an unintended way."))}u.isMDXComponent=!0}}]);