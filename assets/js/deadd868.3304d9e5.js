"use strict";(self.webpackChunkgwoc_open_source=self.webpackChunkgwoc_open_source||[]).push([[40],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,m=u["".concat(p,".").concat(d)]||u[d]||h[d]||o;return n?a.createElement(m,s(s({ref:t},c),{},{components:n})):a.createElement(m,s({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},917:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),s=["components"],i={sidebar_position:25},p="Flux",l={unversionedId:"CNCF Projects/5.25_Flux",id:"CNCF Projects/5.25_Flux",isDocsHomePage:!1,title:"Flux",description:"Flux Image",source:"@site/docs/CNCF Projects/5.25_Flux.md",sourceDirName:"CNCF Projects",slug:"/CNCF Projects/5.25_Flux",permalink:"/docs/CNCF Projects/5.25_Flux",tags:[],version:"current",sidebarPosition:25,frontMatter:{sidebar_position:25},sidebar:"tutorialSidebar",previous:{title:"FALCO",permalink:"/docs/CNCF Projects/5.24_Falco"},next:{title:"KubeEdge",permalink:"/docs/CNCF Projects/5.26_KubeEdge"}},c=[{value:"Components",id:"components",children:[],level:2},{value:"How does the API relate to this?",id:"how-does-the-api-relate-to-this",children:[],level:2},{value:"Action Creators &amp; Actions",id:"action-creators--actions",children:[],level:2}],h={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"flux"},"Flux"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://imgur.com/1ZLgq7V.png",alt:"Flux Image"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Flux")," is an ",(0,o.kt)("strong",{parentName:"p"},"architecture")," that Facebook uses internally when working with ",(0,o.kt)("strong",{parentName:"p"},"React")," . It is not a framework or a library. It is simply a new kind of ",(0,o.kt)("strong",{parentName:"p"},"architecture")," that complements React and the concept of Unidirectional ",(0,o.kt)("strong",{parentName:"p"},"Data Flow")," ."),(0,o.kt)("p",null,"That said, Facebook does provide a repo that includes a ",(0,o.kt)("strong",{parentName:"p"},"Dispatcher library"),". The ",(0,o.kt)("strong",{parentName:"p"},"dispatcher")," is a sort of global pub/sub handler that broadcasts payloads to registered ",(0,o.kt)("strong",{parentName:"p"},"callbacks"),"."),(0,o.kt)("p",null,"A typical Flux architecture will leverage this Dispatcher library, along with ",(0,o.kt)("strong",{parentName:"p"},"NodeJS's EventEmitter module")," in order to set up an event system that helps manage an applications state."),(0,o.kt)("img",{src:"https://imgur.com/k627WyE.png"}),(0,o.kt)("h2",{id:"components"},"Components"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"Actions"))," \u2013 Helper methods that facilitate passing data to the Dispatcher "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"Dispatcher"))," \u2013 Receives actions and broadcasts payloads to registered callbacks "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"Stores"))," \u2013 Containers for application state & logic that have callbacks registered to the dispatcher "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"Controller Views"))," \u2013 React Components that grab the state from Stores and pass it down via props to child components")),(0,o.kt)("p",null,"Flux helps to solve some of the difficulty we run into with ",(0,o.kt)("strong",{parentName:"p"},"unidirectional data")," flow when it comes to changing Application State that is higher up the ",(0,o.kt)("strong",{parentName:"p"},"virtual DOM")," than the Components that alter that State themselves."),(0,o.kt)("p",null,"Controllers do exist in a Flux application, but they are ",(0,o.kt)("strong",{parentName:"p"},"controller-views"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Action creators \u2014 dispatcher helper methods")," \u2014 are used to support a semantic API that describes all changes that are possible in the application. It can be useful to think of them as a fourth part of the Flux update cycle"),(0,o.kt)("h2",{id:"how-does-the-api-relate-to-this"},"How does the API relate to this?"),(0,o.kt)("p",null,"When you are working with data that is coming from (or going to) the outside, I\u2019ve found that using Actions to introduce the data into the Flux Flow, and subsequently Stores, is the most painless way to go about it."),(0,o.kt)("h2",{id:"action-creators--actions"},"Action Creators & Actions"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Action Creators")," are collections of methods that are called within views (or anywhere else for that matter) to send actions to the Dispatcher. Actions are the actual payloads that are delivered via the dispatcher."),(0,o.kt)("p",null,"The way Facebook uses them, action type constants are used to define what action should take place, and are sent along with action data. Inside of ",(0,o.kt)("strong",{parentName:"p"},"registered callbacks"),", these actions can now be handled according to their action type, and methods can be ",(0,o.kt)("strong",{parentName:"p"},"called")," with action data as the arguments."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// ES5 \nvar keyMirror = require('react/lib/keyMirror');\nmodule.exports = keyMirror({\n  LOAD_SHOES: null\n});\n// ES6 \nimport keyMirror from 'react';\nexport keyMirror({ \n        LOAD_SHOES: null\n    }); \n")),(0,o.kt)("p",null,"Above we use React\u2019s ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"keyMirror library"))," to mirror our keys so that our value matches our key definition.\nJust by looking at this file, we can tell that our app loads shoes. The use of constants helps keep things organized, and helps give a high level view of what the app actually does.\nNow lets take a look at the corresponding Action Creator definition:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// ES 5\nvar AppDispatcher = require('../dispatcher/AppDispatcher');\nvar ShoeStoreConstants = require('../constants/ShoeStoreConstants');\nvar ShoeStoreActions = {\n    loadShoes: function(data) {\n     AppDispatcher.handleAction({\n       actionType: ShoeStoreConstants.LOAD_SHOES,\n       data: data\n     })\n   }\n };\n module.exports = ShoeStoreActions;\n // ES6\n import AppDispatcher from '../dispatcher/AppDispatcher';\n import ShoeStoreConstants from '../constants/ShoeStoreConstants';\n class ShoeStoreActions {\n     public function loadShoes(data) {\n         AppDispatcher.handleAction({\n           actionType: ShoeStoreConstants.LOAD_SHOES,\n           data: data\n         });\n         return;\n     }\n }\n")),(0,o.kt)("p",null,"In our example above, we created a method on our ",(0,o.kt)("em",{parentName:"p"},"ShoeStoreActions")," object that calls our ",(0,o.kt)("em",{parentName:"p"},"dispatcher")," with the data we provided. We can now import this actions file into our view or API, and call ",(0,o.kt)("em",{parentName:"p"},"ShoeStoreActions.loadShoes(ourData)")," to send our payload to the ",(0,o.kt)("em",{parentName:"p"},"Dispatcher"),", which will broadcast it. Then the ShoeStore will \u201chear\u201d that event and call a method thats loads up some shoes!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/** @jsx React.DOM */\n var React = require('react');\n var ShoesStore = require('../stores/ShoeStore');\n // Method to retrieve application state from store\n function getAppState() {\n     return {\n         shoes: ShoeStore.getShoes()\n     };\n }\n\n // Create our component class\n var ShoeStoreApp = React.createClass({\n     // Use getAppState method to set initial state\n    getInitialState: function() {\n         return getAppState();\n     },\n     // Listen for changes\n     componentDidMount: function() {\n         ShoeStore.addChangeListener(this._onChange);\n     },\n     // Unbind change listener\n     componentWillUnmount: function() {\n         ShoesStore.removeChangeListener(this._onChange);\n     },\n     render: function() { \n         return <ShoeStore shoes={this.state.shoes} />;\n     },\n     // Update view state when change event is received\n     _onChange: function() {\n         this.setState(getAppState());\n    }\n });\n module.exports = ShoeStoreApp;\n")),(0,o.kt)("p",null,"In the example above, we listen for change events using ",(0,o.kt)("em",{parentName:"p"},"addChangeListener"),", and update our application state when the event is received.\nOur application state data is held in our Stores, so we use the ",(0,o.kt)("em",{parentName:"p"},"public methods")," on the Stores to retrieve that data and then set our application state."))}u.isMDXComponent=!0}}]);